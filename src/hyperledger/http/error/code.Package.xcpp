// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <fpp>
#import hyperledger.required.Enumeration
namespace hyperledger::http::error::code {
  //
  // like std::error_code, but bundles in the companion enumeration.
  // [[presumably]] with inlining and optimization in place, it has zero cost.
  // [[FIXTHIS]] this is stock boilerplate code (once 'using enum Companion' works).
  //
  // Concept:
  //
  //   What you would naturally consider is going on here.
  //   namespace something::something_else::dark_side {
  //     namespace error {
  //       enum class Enumeration { GOOD, CUTE, BETTER };
  //       struct Package : public std::error_code; {
  //          using error_code::error_code;
  //          using enum Enumeration;
  //       };
  //     }
  //   }
  //
  // Design:
  //
  // Can't use inheritance here because pass-by-value doesn't work.
  // Want pass-by-value and pass-by-lvalue-reference to work equally.
  // AND we know that std::error_code is substantially pass-by-value in the deterministic exception usage anyway
  //
  // Thus, disgorge the std::error_code by lvalue reference will handle it.
  // e.g.
  //
  //     auto function(std::error_code) -> Something;
  //     auto ec = Package<Something>{...somehow...};
  //     function(ec);
  //
  // Usage:
  //
  //   auto code = error::Code{error::Code::GOOD};
  //   auto code = std::error_code{error::Code::GOOD};
  //
  template<required::Enumeration COMPANION> struct Package;
}
#endiv
#divert <hpp>
#forward hyperledger.http.error.Condition // condition::Package
#import std.error_category
#import std.error_code
#import std.enable_if
#import std.is_error_code_enum.hyperledger.http.error.code.Enumeration
namespace hyperledger::http::error {
  namespace code {
    template<required::Enumeration COMPANION> inline auto operator==(Package<COMPANION> const &, Package<COMPANION> const &) -> bool;
    template<required::Enumeration COMPANION> inline auto operator!=(Package<COMPANION> const &, Package<COMPANION> const &) -> bool;
    //
    template<required::Enumeration COMPANION> inline auto operator==(Package<COMPANION> const &, condition::Package<COMPANION> const &) -> bool;
    template<required::Enumeration COMPANION> inline auto operator!=(Package<COMPANION> const &, condition::Package<COMPANION> const &) -> bool;
    //
    template<required::Enumeration COMPANION> inline auto operator==(condition::Package<COMPANION> const &, Package<COMPANION> const &) -> bool;
    template<required::Enumeration COMPANION> inline auto operator!=(condition::Package<COMPANION> const &, Package<COMPANION> const &) -> bool;
  }
  template<required::Enumeration COMPANION> class code::Package {
    using Category = std::error_category;
    using Contained = std::error_code;
    using Companion = COMPANION;
  public:
#if 10 <= __GNUC__
    using enum Companion; // one day C++20 will allow implicit construction by ...... {Code::FAILURE}
#else
    //
    // REMINDER ... All this copy-pasta is all subsumed with 'using enum'.  All of it.
    //
    using HTTP = Companion; // in the meanwhile, some implicit construction by ......... {error::Code::E::FAILURE}
    inline static constexpr auto SUCCESS = Companion::SUCCESS;
    inline static constexpr auto FAILURE = Companion::FAILURE;
      // 100-series
    inline static constexpr auto CONTINUE = Companion::CONTINUE;
    inline static constexpr auto SWITCHING_PROTOCOLS = Companion::SWITCHING_PROTOCOLS;
    inline static constexpr auto PROCESSING = Companion::PROCESSING;
    // 200-series
    inline static constexpr auto OK = Companion::OK;
    inline static constexpr auto CREATED = Companion::CREATED;
    inline static constexpr auto ACCEPTED = Companion::ACCEPTED;
    inline static constexpr auto NON_AUTHORITATIVE = Companion::NON_AUTHORITATIVE;
    inline static constexpr auto NO_CONTENT = Companion::NO_CONTENT;
    inline static constexpr auto RESET_CONTENT = Companion::RESET_CONTENT;
    inline static constexpr auto PARTIAL_CONTENT = Companion::PARTIAL_CONTENT;
    inline static constexpr auto MULTI_STATUS = Companion::MULTI_STATUS;
    inline static constexpr auto ALREADY_REPORTED = Companion::ALREADY_REPORTED;
    inline static constexpr auto IM_USED = Companion::IM_USED;
      // 300-series
    inline static constexpr auto MULTIPLE_CHOICES = Companion::MULTIPLE_CHOICES;
    inline static constexpr auto MOVED_PERMANENTLY = Companion::MOVED_PERMANENTLY;
    inline static constexpr auto MOVED_TEMPORARILY = Companion::MOVED_TEMPORARILY;
    inline static constexpr auto SEE_OTHER = Companion::SEE_OTHER;
    inline static constexpr auto NOT_MODIFIED = Companion::NOT_MODIFIED;
    inline static constexpr auto USE_PROXY = Companion::USE_PROXY;
    inline static constexpr auto TEMPORARY_REDIRECT = Companion::TEMPORARY_REDIRECT;
    inline static constexpr auto PERMANENT_REDIRECT = Companion::PERMANENT_REDIRECT;
      // 400-series
    inline static constexpr auto BAD_REQUEST = Companion::BAD_REQUEST;
    inline static constexpr auto UNAUTHORIZED = Companion::UNAUTHORIZED;
    inline static constexpr auto PAYMENT_REQUIRED = Companion::PAYMENT_REQUIRED;
    inline static constexpr auto FORBIDDEN = Companion::FORBIDDEN;
    inline static constexpr auto NOT_FOUND = Companion::NOT_FOUND;
    inline static constexpr auto METHOD_NOT_ALLOWED = Companion::METHOD_NOT_ALLOWED;
    inline static constexpr auto NOT_ACCEPTABLE = Companion::NOT_ACCEPTABLE;
    inline static constexpr auto PROXY_AUTHENTICATION_REQUIRED = Companion::PROXY_AUTHENTICATION_REQUIRED;
    inline static constexpr auto REQUEST_TIME_OUT = Companion::REQUEST_TIME_OUT;
    inline static constexpr auto CONFLICT = Companion::CONFLICT;
    inline static constexpr auto GONE = Companion::GONE;
    inline static constexpr auto LENGTH_REQUIRED = Companion::LENGTH_REQUIRED;
    inline static constexpr auto PRECONDITION_FAILED = Companion::PRECONDITION_FAILED;
    inline static constexpr auto REQUEST_ENTITY_TOO_LARGE = Companion::REQUEST_ENTITY_TOO_LARGE;
    inline static constexpr auto REQUEST_URI_TOO_LARGE = Companion::REQUEST_URI_TOO_LARGE;
    inline static constexpr auto UNSUPPORTED_MEDIA_TYPE = Companion::UNSUPPORTED_MEDIA_TYPE;
    inline static constexpr auto RANGE_NOT_SATISFIABLE = Companion::RANGE_NOT_SATISFIABLE;
    inline static constexpr auto EXPECTATION_FAILED = Companion::EXPECTATION_FAILED;
    inline static constexpr auto IM_A_TEAPOT = Companion::IM_A_TEAPOT;
      // 419 unused
      // 420 unused
    inline static constexpr auto MISDIRECTED_REQUEST = Companion::MISDIRECTED_REQUEST;
    inline static constexpr auto UNPROCESSABLE_ENTITY = Companion::UNPROCESSABLE_ENTITY;
    inline static constexpr auto LOCKED = Companion::LOCKED;
    inline static constexpr auto FAILED_DEPENDENCY = Companion::FAILED_DEPENDENCY;
    inline static constexpr auto TOO_EARLY = Companion::TOO_EARLY;
    inline static constexpr auto UPGRADE_REQUIRED = Companion::UPGRADE_REQUIRED;
      // 427 unused
    inline static constexpr auto PRECONDITION_REQUIRED = Companion::PRECONDITION_REQUIRED;
    inline static constexpr auto TOO_MANY_REQUESTS = Companion::TOO_MANY_REQUESTS;
      // 430 unused
    inline static constexpr auto REQUEST_HEADER_FIELDS_TOO_LARGE = Companion::REQUEST_HEADER_FIELDS_TOO_LARGE;
    inline static constexpr auto UNAVAILABLE_FOR_LEGAL_REASONS = Companion::UNAVAILABLE_FOR_LEGAL_REASONS;
      // 500-series
    inline static constexpr auto INTERNAL_SERVER_ERROR = Companion::INTERNAL_SERVER_ERROR;
    inline static constexpr auto NOT_IMPLEMENTED = Companion::NOT_IMPLEMENTED;
    inline static constexpr auto BAD_GATEWAY = Companion::BAD_GATEWAY;
    inline static constexpr auto SERVICE_UNAVAILABLE = Companion::SERVICE_UNAVAILABLE;
    inline static constexpr auto GATEWAY_TIME_OUT = Companion::GATEWAY_TIME_OUT;
    inline static constexpr auto VERSION_NOT_SUPPORTED = Companion::VERSION_NOT_SUPPORTED;
    inline static constexpr auto VARIANT_ALSO_VARIES = Companion::VARIANT_ALSO_VARIES;
    inline static constexpr auto INSUFFICIENT_STORAGE = Companion::INSUFFICIENT_STORAGE;
    inline static constexpr auto LOOP_DETECTED = Companion::LOOP_DETECTED;
    inline static constexpr auto NOT_EXTENDED = Companion::NOT_EXTENDED;
    inline static constexpr auto NETWORK_AUTHENTICATION_REQUIRED = Companion::NETWORK_AUTHENTICATION_REQUIRED;
#endif
    // Follow the constructor signature for error_code
    Package() = default;
    Package(int i, Category const &c) noexcept : contained{i, c} { }
    template<required::Enumeration CODE, typename = typename std::enable_if<std::is_error_code_enum<CODE>::value>::type> Package(CODE c) noexcept { contained = make_error_code(c); }
    Package(Contained d) noexcept : contained{d} { }
    operator Contained const &() const noexcept { return contained; }
  private:
    Contained contained;
  };
}
#endiv
#divert <ipp>
#import hyperledger.http.error.Condition
namespace hyperledger::http::error {
  template<required::Enumeration COMPANION> auto code::operator==(Package<COMPANION> const &a, Package<COMPANION> const &b) -> bool { return (std::error_code) a == (std::error_code) b; }
  template<required::Enumeration COMPANION> auto code::operator!=(Package<COMPANION> const &a, Package<COMPANION> const &b) -> bool { return (std::error_code) a != (std::error_code) b; }
  //
  template<required::Enumeration COMPANION> auto code::operator==(Package<COMPANION> const &a, condition::Package<COMPANION> const &b) -> bool { return (std::error_code) a == (std::error_condition) b; }
  template<required::Enumeration COMPANION> auto code::operator!=(Package<COMPANION> const &a, condition::Package<COMPANION> const &b) -> bool { return (std::error_code) a != (std::error_condition) b; }
  //
  template<required::Enumeration COMPANION> auto code::operator==(condition::Package<COMPANION> const &a, Package<COMPANION> const &b) -> bool { return (std::error_condition) a == (std::error_code) b; }
  template<required::Enumeration COMPANION> auto code::operator!=(condition::Package<COMPANION> const &a, Package<COMPANION> const &b) -> bool { return (std::error_condition) a != (std::error_code) b; }
}
#endiv
