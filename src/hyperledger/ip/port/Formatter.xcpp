// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace hyperledger::ip::port {
  //
  // Format an ip::Port
  // A separate type so that ADL will find it.
  //
  struct Formatter;
}
#endiv
#divert <hpp>
#import hyperledger.net.endpoint.Formatter
#forward hyperledger.ip.Port
#import hyperledger.string.Storage
#import hyperledger.required.Character
#import hyperledger.required.Character_Traits
#import std.basic_ostream
namespace hyperledger::ip {
  namespace port {
    inline auto format(Port const &) -> Formatter;
    inline auto to_string(Formatter const &) -> string::Storage;
    template<required::Character CHAR, required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter const &) -> std::basic_ostream<CHAR, TRAITS> &;
  }
  class port::Formatter : public net::endpoint::Formatter<Port> {
    using Ancestor = net::endpoint::Formatter<Port>;
  public:
    using Ancestor::Formatter;
  };
}
#endiv
#divert <ipp>
#import hyperledger.ip.Port
#import hyperledger.detail.reformat
#import std.ostringstream
namespace hyperledger::ip {
  auto port::format(Port const &pp) -> Formatter { return Formatter{pp}; }
  auto port::to_string(Formatter const &ff) -> string::Storage { return detail::reformat::to_string(ff); }
  template<required::Character CHAR, required::Character_Traits TRAITS> auto port::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    return o << (typename Formatter::Value::Value) f.value;
  }
}
#endiv
