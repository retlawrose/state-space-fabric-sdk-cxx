// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
#import hyperledger.fabric.peer.chaincode.required.Is_Result
namespace hyperledger::fabric::peer::chaincode::required {
  //
  // There are only a few reasonable types here.
  // But there might be more, and to give some flexibility, a traits is used.
  //
  template<typename RESULT> concept bool Result = Is_Result<RESULT>::value;
}
#endiv
#divert <cpp>
#import hyperledger.fabric.Success
#import std.deque
#import std.string
#import std.vector
namespace hyperledger::fabric::peer::chaincode {
  static_assert(required::Result<bool>);
  static_assert(!required::Result<Success>); // remember: Success = Outcome<literal::Success>
  static_assert(required::Result<literal::Success>);
  static_assert(!required::Result<int>);
  static_assert(required::Result<std::string>);
  static_assert(required::Result<std::vector<std::byte>>);
  static_assert(required::Result<std::deque<std::byte>>);
}
#endiv
