// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace hyperledger::fabric::tls {
  //
  // A tls endpoint is like an ip::Endpoint but has an optional Certificate Authority (a file)
  // That file contains one or more bundle of Certificate Authority root certificates.
  // The printed format is not different than for an ip::Endpoint
  // To access other fields, you must use the two-argument form of format
  //
  // The Certificate Authority (CA) is used to validate the certificate that *they* offer to us.
  //
  // Usage:
  //
  //   auto e = Endpoint{"localhost", 80};
  //   auto s = to_string(e);
  //   cerr << format(e);
  //   cerr << format(e, Field::CA);
  //   cerr << format(e, Field::HOST);
  //   cerr << format(e, Field::PORT);
  //   cerr << format(e, Field::ENDPOINT);
  //
  class Endpoint;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.tls.endpoint.Basis
#import hyperledger.fabric.Boolean
class hyperledger::fabric::tls::Endpoint : public tls::endpoint::Basis {
  using ancestor = tls::endpoint::Basis;
public:
  Endpoint() = default;
  inline explicit Endpoint(Host);
  inline Endpoint(Host, Port);
  inline Endpoint(Host, Filepath);
  inline Endpoint(Host, Port, Filepath);
  Boolean dotls;
};
#endiv
#divert <ipp>
#import std.move
hyperledger::fabric::tls::Endpoint::Endpoint(Host host)
  : ancestor{std::move(host)}
{ }
hyperledger::fabric::tls::Endpoint::Endpoint(Host host, Port port)
  : ancestor{std::move(host),std::move(port)}
{ }
hyperledger::fabric::tls::Endpoint::Endpoint(Host host, Filepath file)
  : ancestor{std::move(host), std::move(file)}
  , dotls{true}
{ }
hyperledger::fabric::tls::Endpoint::Endpoint(Host host, Port port, Filepath file)
  : ancestor{std::move(host), std::move(port), std::move(file)}
  , dotls{true}
{ }
#endiv
