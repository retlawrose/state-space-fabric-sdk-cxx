// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace hyperledger::fabric::tls::endpoint {
  //
  // The field-level formatter
  //
  // Usage:
  //
  //   auto endpoint = tls::Endpoint{...somehow...};
  //   cerr << format(endpoint, Field::ENDPOINT);
  //   cerr << format(endpoint, Field::HOST);
  //   cerr << format(endpoint, Field::PORT);
  //   cerr << format(endpoint, Field::CA);
  //
  struct Formatter;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.tls.endpoint.Basis
#import hyperledger.fabric.tls.Field
#import std.string
namespace hyperledger::fabric::tls {
  // ADL will find this because of Field, not because of endpoint::Basis
  inline auto format(endpoint::Basis const &, Field) -> endpoint::Formatter;
  namespace endpoint {
    inline auto to_string(Formatter const &) -> std::string;
  }
}
#import hyperledger.fabric.required.Character
#import hyperledger.fabric.required.Character_Traits
#import std.basic_ostream
namespace hyperledger::fabric::tls::endpoint {
  template<required::Character CHAR, required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#import std.ostringstream
auto hyperledger::fabric::tls::endpoint::to_string(Formatter const &ff) -> std::string {
  std::ostringstream buf;
  buf << ff;
  return buf.str();
}
#import hyperledger.fabric.tls.endpoint.Basis
struct hyperledger::fabric::tls::endpoint::Formatter {
  using Value = Basis;
  inline explicit Formatter(Value const &value, Field field) : value{value}, field{field} { }
  Value const &value;
  Field field;
};
#endiv
#divert <ipp>
auto hyperledger::fabric::tls::format(endpoint::Basis const &pp, Field ff) -> endpoint::Formatter {
  return endpoint::Formatter{pp, ff};
}
#import want.format.dq
namespace hyperledger::fabric::tls::endpoint {
  template<required::Character CHAR, required::Character_Traits TRAITS> auto endpoint::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter const &f) -> std::basic_ostream<CHAR, TRAITS> & {
     // we came all this way for the switch statement
     switch (f.field) {
     case Field::CA:
       return o << want::format::dq(*f.value.ca); // can throw bad_optional_access
     case Field::PORT:
     return o << *f.value.port; // ibidem. (and you asked for it explicitly but it is not there)
     case Field::HOST:
     return o << ip::host::format(f.value.host);
     case Field::ENDPOINT:
     default:
     return o << ip::format(static_cast<ip::Endpoint const &>(f.value));
     }
  }
}
#endiv
