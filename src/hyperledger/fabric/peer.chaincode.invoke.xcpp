// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <hpp>
#import hyperledger.fabric.peer.chaincode.call
#import hyperledger.fabric.peer.chaincode.Call
#import hyperledger.fabric.peer.chaincode.required.Result
#import std.byte
#import std.get
#import std.string
#import std.vector
namespace hyperledger::fabric::peer::chaincode {
  //
  // invoke(...) the chaincode (stored procedure) on the other side
  // exactly like query(...), except it can actually side effect the ledger
  //
  // The constructor is a JSON-formatted string which will be
  // interpreted by the stored procedure (chaincode) in the database.
  // It is passed through without interpretation.
  //
  // Example:
  //
  //   auto constructor = R"json( { "Args" : [ "set" , "chicken", "funky" ] } )json"; .... the spaces are for readability; they are not required.
  //
  //   auto answered = invoke(context, constructor);
  //   auto answered = invoke<bool>(context, constructor);
  //   auto answered = invoke<Success>(context, constructor);
  //   auto answered = invoke<std::string>(context, constructor);
  //   if (!ok(answered)) {
  //     auto ec = error_code(answered);
  //     ...report the badness...
  //   } else {
  //      auto const &result = value(const_cast<decltype(answered)>(answered));
  //      auto &result = value(answered);
  //      auto result = value(std::move(answered));
  //      ...use the goodness...
  //   }
  //
  namespace packaging::invoke::function {
    using packaging::call::function::call;
    using packaging::call::function::INVOKE;
    inline auto invoke(Call &, std::string const &constructor) -> Outcome<std::string>;
    template<required::Result RESULT> auto invoke(Call &, std::string const &constructor) -> Outcome<RESULT> = delete;
    // Only these specializations
    template<> inline auto invoke<literal::Success>(Call &, std::string const &constructor) -> Outcome<literal::Success>;
    template<> inline auto invoke<bool>(Call &, std::string const &constructor) -> Outcome<bool>;
    template<> inline auto invoke<std::string>(Call &, std::string const &constructor) -> Outcome<std::string>;
    template<> inline auto invoke<std::vector<std::byte>>(Call &, std::string const &constructor) -> Outcome<std::vector<std::byte>>;
  }
  using packaging::invoke::function::invoke;
}
#endiv
#divert <ipp>
namespace hyperledger::fabric::peer::chaincode::packaging::invoke {
  auto function::invoke(Call &c, std::string const &n) -> Outcome<std::string> {
    return call<std::string>(INVOKE, c, n); // call the specialization of the same return type
  }
  template<> auto function::invoke<literal::Success>(Call &c, std::string const &n) -> Outcome<literal::Success> {
    return call<literal::Success>(INVOKE, c, n);
  }
  template<> auto function::invoke<bool>(Call &c, std::string const &n) -> Outcome<bool> {
    return call<bool>(INVOKE, c, n);
  }
  template<> auto function::invoke<std::string>(Call &c, std::string const &n) -> Outcome<std::string> {
    return call<std::string>(INVOKE, c, n);
  }
  template<> auto function::invoke<std::vector<std::byte>>(Call &c, std::string const &n) -> Outcome<std::vector<std::byte>> {
    return call<std::vector<std::byte>>(INVOKE, c, n);
  }
}
#endiv
