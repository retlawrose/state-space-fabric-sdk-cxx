// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace hyperledger::fabric::tls::endpoints::series {
  //
  // The field-level formatter for the series
  //
  // Usage:
  //
  //   auto series = tls::endpoints::Series{...somehow...};
  //   cerr << format(series, Field::ENDPOINT);
  //   cerr << format(series, Field::HOST);
  //   cerr << format(series, Field::PORT);
  //   cerr << format(series, Field::CA);
  //
  struct Formatter;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.tls.endpoints.Series
#import hyperledger.fabric.tls.Field
namespace hyperledger::fabric::tls {
  namespace endpoints {
    inline auto format(Series const &, Field) -> series::Formatter; // ADL will find this here
    namespace series {
      inline auto to_string(Formatter const &) -> std::string;
    }
  }
  using endpoints::format; // but you probably expect to find the the overload here.
}
#import hyperledger.fabric.required.Character
#import hyperledger.fabric.required.Character_Traits
#import std.basic_ostream
namespace hyperledger::fabric::tls::endpoints::series {
  template<required::Character CHAR, required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#import hyperledger.fabric.tls.endpoints.Series
struct hyperledger::fabric::tls::endpoints::series::Formatter {
  using Value = Series;
  inline explicit Formatter(Value const &value, Field field) : value{value}, field{field} { }
  Value const &value;
  Field field;
};
#endiv
#divert <ipp>
auto hyperledger::fabric::tls::endpoints::format(Series const &ss, Field ff) -> endpoints::series::Formatter {
  return endpoints::series::Formatter{ss, ff};
}
#import std.ostringstream
auto hyperledger::fabric::tls::endpoints::series::to_string(Formatter const &ff) -> std::string {
  std::ostringstream buf;
  buf << ff;
  return buf.str();
}
#import std.make_ostream_joiner
#import std.transform
namespace hyperledger::fabric::tls::endpoints {
  template<required::Character CHAR, required::Character_Traits TRAITS> auto series::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    auto sink = std::make_ostream_joiner(o, ",");
    auto fmt = [&f](auto const &pointwise) { return format(pointwise, f.field); };
    std::transform(f.value.begin(), f.value.end(), sink, fmt);
    return o;
  }
}
#endiv
