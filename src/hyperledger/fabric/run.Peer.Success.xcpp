// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
#import hyperledger.fabric.Success
#forward hyperledger.fabric.run.Peer
namespace hyperledger::fabric::run {
  //
  // The Hyperledger Fabric peer(1) program
  // Returning merely a Success indication.
  // e.g.
  //   peer channel create
  //   peer channel join
  //   peer channel ...etc....
  //
  // These sorts of operations *require* contact with an orderer.
  // They do not use the peer set yet; will not have a peer::Contact
  //
  // Usage:
  //
  //   auto context = ...somehow...   <--------------------- and that's the hard part now isn't it?
  //   Peer<Success> prog{context};
  //   auto w = prog.run();
  //   auto b = ok(w);
  //
  template<> class Peer<Success>;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.run.peer.Basis
#import want.run.Runner
template<> class hyperledger::fabric::run::Peer<hyperledger::fabric::Success> : public peer::Basis<want::run::Runner> {
  using ancestor = peer::Basis<want::run::Runner>;
public:
  inline explicit Peer(Context const &context) : ancestor{context} { }
};
#endiv
