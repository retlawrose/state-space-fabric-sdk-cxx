// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#if 0
POUND import tunitas.Visitor
namespace hyperledger::fabric::ip::host {
  using tunitas::Visitor; // [[FIXTHIS]] tunitas-basics >= 1.8 maybe?
}
#elif 0
POUND import nonstd.Visitor
namespace hyperledger::fabric::ip::host {
  using nonstd::Visitor; // not available until the module-nonstd-devel >= 0.2 era
}
#else
#import std.variant
namespace hyperledger::fabric::ip::host {
  //
  // The generic "visitor" constructor
  // As exhibited in https://en.cppreference.com/w/cpp/utility/variant/visit
  //
  // The envisioned usage is, of course, with ip::Host.
  //
  // Usage:
  //
  //   using Both = std::variant<double, std::intmax_t>;
  //   Both val = ...3 or 3.0...
  //
  //   auto vis = Visitor{[](double) { ... },
  //                      [](std::intmax_t) { ... }};
  //   auto ret = std::visit(vis, val);
  //
  template<typename... TYPES> struct Visitor : TYPES... { using TYPES::operator()...; };
  template<typename... TYPES> Visitor(TYPES...) -> Visitor<TYPES...>;
}
#endif
#endiv
