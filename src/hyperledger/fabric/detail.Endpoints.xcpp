// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace hyperledger::fabric::detail {
  //
  // Generically, a series of endpoints.
  // Some calls allow for a series of endpoints to be used.
  //
  // Usage:
  //
  //   auto es = Endpoints{{"localhost", 80},{"localhost",8080},{"localhost":8088}};
  //   cerr << format(es);
  //   auto s = std::to_string(es);
  //
  template<typename ENDPOINT> class Endpoints;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.required.Character
#import hyperledger.fabric.required.Character_Traits
#forward hyperledger.fabric.detail.Formatter
#import std.basic_ostream
#import std.string
namespace hyperledger::fabric::detail {
  template<required::Character CHAR, required::Character_Traits TRAITS, typename ENDPOINT> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<Endpoints<ENDPOINT>> const &) -> std::basic_ostream<CHAR, TRAITS> &;
  template<typename ENDPOINT> inline auto format(Endpoints<ENDPOINT> const &) -> Formatter<Endpoints<ENDPOINT>>;
  template<typename ENDPOINT> inline auto to_string(Endpoints<ENDPOINT> const &) -> std::string;
}
#import std.list
#import std.initializer_list
template<typename ENDPOINT> class hyperledger::fabric::detail::Endpoints : protected std::list<ENDPOINT> {
  using Ancestor = std::list<ENDPOINT>;
public:
  using Value = ENDPOINT; //     New School
  using Initializer = std::initializer_list<Value>;
  using Ancestor::value_type; // old_school
  Endpoints() = default;
  using Ancestor::list; // the rest of the constructors
  using Ancestor::empty;
  using Ancestor::size;
  using Ancestor::begin;
  using Ancestor::end;
  using Ancestor::push_back;
  using Ancestor::push_front;
  // omitted, all the erasure and searching
protected:
  friend auto swap(Endpoints &a, Endpoints &b) noexcept -> void {
    swap(static_cast<Ancestor &>(a), static_cast<Ancestor &>(b));
  }
};
#endiv
#divert <ipp>
#import hyperledger.fabric.detail.Formatter
#import std.ostringstream
#import std.copy
#import std.make_ostream_joiner
namespace hyperledger::fabric {
  template<required::Character CHAR, required::Character_Traits TRAITS, typename ENDPOINT> auto detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<Endpoints<ENDPOINT>> const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    auto const formatter = [](auto const &endpoint) { return format(endpoint); };
    std::transform(f.value.begin(), f.value.end(), std::make_ostream_joiner(o, ","), formatter);
    return o;
  }
  template<typename ENDPOINT> auto detail::format(Endpoints<ENDPOINT> const &es) -> Formatter<Endpoints<ENDPOINT>> {
    return Formatter<Endpoints<ENDPOINT>>{es};
  }
  template<typename ENDPOINT> auto detail::to_string(Endpoints<ENDPOINT> const &es) -> std::string {
    std::ostringstream buf;
    buf << format(es);
    return buf.str();
  }
}
#endiv
