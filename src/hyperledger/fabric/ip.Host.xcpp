// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import std.variant
#import std.string
#import std.char_traits
namespace hyperledger::fabric::ip {
  //
  // An Internet Protocol Host
  // May be specified by any of a number of naming conventions
  //   ...Some Uninterpreted Characters...        (e.g. the non-canonical address syntaxes)
  //   ...Fully-Qualified Domain Name...
  //   ...IPv4 Address...
  //   ...IPv6 Address...
  //
  // Usage:
  //
  //  auto h = Host{host::Uninterpreted{"127.0.0.1"}};
  //  auto h = Host{host::Uninterpreted{"::0:0:0:1"}};
  //  auto h = Host{host::Name{"localhost"};
  //  auto h = Host{host::Address4{...somehow...}};
  //  auto h = Host{host::Address6{...somehow...}};
  //
  //  cerr << format(h);
  //  auto s = to_string(h);
  //
  namespace host {
    // Uninterpreted host naming syntax
    // Per glibc, this is either a Domain Name or an IPv4 Address (dotted quad) or an IPv6 Address (those colons)
    // Whatever glibc does with it is whatever happens.
    using Uninterpreted = std::string;
    namespace traits {
      struct Name : public std::char_traits<char> { };
      namespace stub {
        struct Address4 : public std::char_traits<char> { };
        struct Address6 : public std::char_traits<char> { };
      }
    }
    using Name = std::basic_string<char, traits::Name>;
    using Address4 = std::basic_string<char, traits::stub::Address4>; // [[FIXTHIS]] forthcoming tunitas::ip::Address4
    using Address6 = std::basic_string<char, traits::stub::Address6>; // [[FIXTHIS]] forthcoming tunitas::ip::Address4
  }
  using Host = std::variant<host::Uninterpreted, host::Name, host::Address4, host::Address6>;
}
#endiv
#divert <hpp>
namespace hyperledger::fabric::ip {
  namespace host {
    // ADL would naturally find it here
    inline auto to_string(Host const &) -> std::string;
  }
  // But you expect to find it here because you think that Host is a full type, not just a type alias.
  using host::to_string;
}
#import hyperledger.fabric.ip.host.Formatter
#endiv
#divert <ipp>
#import std.ostringstream
auto hyperledger::fabric::ip::host::to_string(Host const &hh) -> std::string {
  std::ostringstream buf;
  buf << format(hh);
  return buf.str();
}
#endiv
