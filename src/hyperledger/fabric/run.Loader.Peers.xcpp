// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.fabric.run.Loader
#import hyperledger.fabric.peers.Contact
namespace hyperledger::fabric::run {
  //
  // Loader for peers contact options
  //
  template<> class Loader<peers::Contact>;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.run.loader.Basis
template<> struct hyperledger::fabric::run::Loader<hyperledger::fabric::peers::Contact> : public loader::Basis {
  using Source = tls::Endpoints; // NOT peers::Contact because that contains the client; see Loader<Client>
protected:
  ~Loader() = default;
  Loader() = default;
  inline auto load(Arguments &lhs, Source const &rhs) -> void;
};
#endiv
#divert <ipp>
auto hyperledger::fabric::run::Loader<hyperledger::fabric::peers::Contact>::load(Arguments &lhs, Source const &rhs) -> void {
  push_back<2>(lhs) << "--peerAddresses" << rhs;
  if (rhs.dotls) {
    // There is rhyming code in the Loader<Orderer> to name the cafile; see the AAA (Asked&Answered) therein.
    push_back<2>(lhs) << "--tlsRootCertfiles" << tls::format(rhs, tls::Field::CA);
  }
}
#endiv
