// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace hyperledger::fabric::run::loader {
  //
  // An equality comparison where none naturally exists.
  // In support of the loader's processing conflicting optional fields (e.g. fabric::Contact::client)
  //
  // This is deep deep implementation detail.
  //
  // Usage:
  //
  //   if (are_the_same(thing1, thing2)) {
  //    ...act upon that...
  //   }
  //
  template<typename TYPE> struct Compare;
}
#endiv
#divert <hpp>
namespace hyperledger::fabric::run {
  template<typename TYPE> struct loader::Compare {
    using Argument = TYPE;
    inline auto operator()(Argument const &a, Argument const &b) const -> bool { return a == b; }
  };
}
#endiv
