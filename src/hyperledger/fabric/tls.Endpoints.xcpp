// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace hyperledger::fabric::tls {
  //
  // A series of TLS endpoints, with the dotls signal factored out
  // Some calls, e.g. the peer(s) call, allow for a series of endpoints to be used.
  //
  // If dotls is true, it is an exception-signalled error for the optional Series' Endpoint::ca to be empty
  //
  // Usage:
  //
  //   auto es = Endpoints{true, {{"localhost"},{"localhost",8080},{"localhost":8088, "/etc/hyperledger/fabric/tls/ca.crt"}}};
  //   cerr << format(es);
  //   auto s = std::to_string(es);
  //
  class Endpoints;
}
#endiv
#divert <hpp>
namespace hyperledger::fabric::tls {
  inline auto swap(Endpoints &, Endpoints &) noexcept -> void;
  // see format(...), operator<<, to_string(...) against tls::endpoints::Series
}
#import hyperledger.fabric.tls.endpoints.Series
#import hyperledger.fabric.Boolean
class hyperledger::fabric::tls::Endpoints : public tls::endpoints::Series {
  using Ancestor = tls::endpoints::Series;
  friend auto swap(Endpoints &a, Endpoints &b) noexcept -> void;
public:
  using Series = Ancestor;
  Endpoints() = default;
  inline Endpoints(Series::Initializer);
  inline explicit Endpoints(Series);
  inline Endpoints(bool, Series);
  Boolean dotls;
};
#endiv
#divert <ipp>
auto hyperledger::fabric::tls::swap(Endpoints &a, Endpoints &b) noexcept -> void {
  using Ancestor = Endpoints::Ancestor;
  swap(static_cast<Ancestor &>(a), static_cast<Ancestor &>(b));
  swap(a.dotls, b.dotls);
}
#import std.move
hyperledger::fabric::tls::Endpoints::Endpoints(Series series)
  : Ancestor{std::move(series)}
{ }
hyperledger::fabric::tls::Endpoints::Endpoints(Series::Initializer init)
  : Ancestor{std::move(init)}
{ }
hyperledger::fabric::tls::Endpoints::Endpoints(bool dotls, Series series)
  : Ancestor{std::move(series)}
  , dotls{dotls}
{ }
#endiv
