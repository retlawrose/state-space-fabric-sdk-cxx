// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace hyperledger::fabric::detail {
  //
  // A formatter, upon which hangs an operator<<
  // The magic happens in the overloaded operator<<
  // The overloaded operator<< is supplied for each specialization
  // There is a nearby ADL-visible format(...) function which constructs the Formatter
  // The Formatter captures a reference to its subject
  // The subject of the formatter must have a lifetime longer than that of the Formatter
  //
  // Usage:
  //
  //    auto operator<<(std::ostream &, detail::Formatter<Thing> const &) -> std::ostream & {
  //       ...something happens here...
  //    }
  //
  //   cerr << format(thing);
  //
  template<typename TYPE> struct Formatter;
}
#endiv
#divert <hpp>
template<typename TYPE> struct hyperledger::fabric::detail::Formatter {
  using Value = TYPE;
  inline explicit Formatter(Value const &value) : value{value} { }
  Value const &value;
};
#endiv
