// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.fabric.v0.run.loader.Compare.template
#import hyperledger.tls.Client
namespace hyperledger::fabric::v0::run::loader {
  // A comparator; an implementation detail of the loader subsystem
  template<> struct Compare<tls::Client>;
}
#endiv
#divert <hpp>
#import std.declval
template<> struct hyperledger::fabric::v0::run::loader::Compare<hyperledger::tls::Client> {
  using Argument = tls::Client;
  inline auto operator()(Argument const &, Argument const &) const -> bool;
protected:
  using Triple = decltype(std::declval<tls::Client>().tls); // WATCHOUOT - this is a std::optional<...>
};
#endiv
#divert <ipp>
#import hyperledger.fabric.v0.run.loader.Compare.Triple.ITEM
#import hyperledger.fabric.v0.run.loader.Compare.optional
auto hyperledger::fabric::v0::run::loader::Compare<hyperledger::tls::Client>::operator()(Argument const &a, Argument const &b) const -> bool {
  Compare<Triple> retls;
  return a.auth == b.auth && retls(a.tls, b.tls);
}
#endiv
