// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.fabric.v0.run.Loader
#import hyperledger.fabric.v0.peer.chaincode.Call
namespace hyperledger::fabric::v0::run {
  //
  // The (arguments) Loader for the "call" subcommands of 'peer chaincode'
  // e.g. 'peer chaincode query' and 'peer chaincode invoke'
  //
  template<> class Loader<peer::chaincode::Call>;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.v0.run.loader.Basis
namespace hyperledger::fabric::v0::run {
  template<> struct Loader<peer::chaincode::Call> : public loader::Basis {
    using Source = peer::chaincode::Call;
  protected:
    ~Loader() = default;
    Loader() = default;
    inline auto load(Arguments &lhs, Source const &rhs) -> void;
  };
}
#endiv
#divert <ipp>
namespace hyperledger::fabric::v0::run {
  auto Loader<peer::chaincode::Call>::load(Arguments &lhs, Source const &rhs) -> void {
    push_back<2>(lhs) << "--channelID" << rhs.channelID;
    push_back<2>(lhs) << "--name" << rhs.name;
    if (rhs.profile) {
      push_back<2>(lhs) << "--connectionProfile" << *rhs.profile;
    }
  }
}
#endiv
