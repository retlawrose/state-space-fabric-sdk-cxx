// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import tunitas.outcome.Success
#import std.get
#import std.decay
namespace hyperledger::fabric {
  //
  // The degenerate "success" outcome which either succeeds or has a rich(er) error reason.
  // See Outcome<T>, nearby
  //
  // Usage:
  //
  //   auto function() -> Success;
  //   auto called = function();
  //   if (ok(called)) {
  //      ...fine and in this case value(called) is a singleton enum.
  //   } else {
  //      auto ec = error_code(called);
  //   }
  //
  using Success = tunitas::outcome::Success;
  inline constexpr auto SUCCESS = tunitas::outcome::SUCCESS;
  namespace literal {
    using Success = std::decay<decltype(std::get<1>(Success{}))>::type;
  }
}
#endiv
#divert <cpp>
#import std.is_same
#import std.error_code
#import hyperledger.fabric.Outcome
namespace hyperledger::fabric {
  // Self--check in case the ordering in Outcome<TYPE> changes and get<1>(OUTCOME) is no longer correct
  static_assert(!std::is_same<std::error_code, literal::Success>::value);
  // Remind us that this tautology still holds
  static_assert(std::is_same<Success, Outcome<literal::Success>>::value);
}
#endiv
