// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <hpp>
#import hyperledger.fabric.tls.from_string
#import hyperledger.fabric.tls.Endpoint
namespace hyperledger::fabric::tls {
  //
  // The singleton endpoint, with dotls
  // The documentariat is with detail::get_hostport(...)
  //
  template<> inline auto from_string<Endpoint>(std::string const &) -> Outcome<Endpoint>;
}
#endiv
#divert <ipp>
#import hyperledger.fabric.detail.get_hostport
namespace hyperledger::fabric {
  template<> auto tls::from_string<tls::Endpoint>(std::string const &syntax) -> Outcome<Endpoint> {
    using Result = Outcome<Endpoint>;
    auto got = detail::get_hostport(syntax);
    if (!ok(got)) {
      return Result{error_code(got)};
    } else {
      auto &val = value(got);
      auto &host = std::get<0>(val);
      auto &port = std::get<1>(val);
      return Result{Endpoint{std::move(host), std::move(port)}};
    }
  }
}
#endiv
