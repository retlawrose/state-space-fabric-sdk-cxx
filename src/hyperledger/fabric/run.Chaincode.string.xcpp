// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#forward hyperledger.fabric.run.Chaincode
#import std.string
namespace hyperledger::fabric::run {
  //
  // The Hyperledger Fabric peer(1) program, chaincode subcommand.
  // Returning a string payload.
  // There are (only) two such subcommands 'invoke' and 'query'
  // e.g.
  //   peer chaincode invoke       e.g. {"Args":["get", key]}
  //   peer chaincode query        also {"Args":["history", key]}
  //
  // Implements:
  //
  //   peer chaincode <subcommand> ...options... ...arguments...
  //
  // Usage:
  //
  //   auto context = Call{...};
  //   Program<std::string> prog{"invoke", context};
  //   peer::Context const &context = ...somehow...;
  //   Program<std::string> prog{context};
  //   auto s = prog.start();
  //   if (ok(s)) {
  //      if (prog.stream() >> payload) {
  //        if (stream.eof()) {
  //           ...good...   (payload contains the whole slurp)
  //        } else {
  //           ...ungood... (the stream has failed or there is still more out there in the pipe...)
  //      }
  //   } else {
  //     auto ec = error_code(s);   ...can't start...
  //   }
  //   auto w = run.wait();
  //   if (ok(w)) {
  //      ...ok...
  //   } else {
  //      auto ec = error_code(w);
  //      ...there was some problem...
  //   }
  //
  template<> class Chaincode<std::string>;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.run.chaincode.Basis
#import std.string
#import want.run.Piped_From
template<> class hyperledger::fabric::run::Chaincode<std::string> : public chaincode::Basis<want::run::Piped_From> {
  using ancestor = chaincode::Basis<want::run::Piped_From>;
public:
  inline explicit Chaincode(std::string subcommand, Context const &, std::string constructor_args_blob);
};
#endiv
#divert <ipp>
#import std.move
hyperledger::fabric::run::Chaincode<std::string>::Chaincode(std::string subcommand, Context const &context, std::string constructor_args_blob)
  : ancestor{std::move(subcommand), context, std::move(constructor_args_blob)}
{ }
#endiv
