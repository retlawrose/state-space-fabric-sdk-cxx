// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.fabric.Success
#forward hyperledger.fabric.run.Chaincode
namespace hyperledger::fabric::run {
  //
  // The Hyperledger Fabric peer(1) program, chaincode subcommand.
  // Returning merely a Success indication.
  // e.g.
  //   peer chaincode invoke       e.g. {"Args":["set", key, value]}
  //   peer chaincode query
  //
  // Implements:
  //
  //   peer chaincode <subcommand> ...options... ...arguments...
  //
  // Usage:
  //
  //   auto context = ...somehow...   <--------------------- and that's the hard part now isn't it?
  //   Chaincode<Success> prog{"query", context};
  //   auto w = prog.run();
  //   auto b = ok(w); <-------------------- this checks the OS invocation; does not check for "200"
  //
  //        [[FIXTHIS]] document how to recover the Gossip-level "200"; see run.Chaincode.string.xcpp
  //
  template<> class Chaincode<Success>;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.run.chaincode.Basis
#import std.string
#import shell.run.Runner
template<> class hyperledger::fabric::run::Chaincode<hyperledger::fabric::Success> : public chaincode::Basis<shell::run::Runner> {
  using Ancestor = chaincode::Basis<shell::run::Runner>;
public:
  inline explicit Chaincode(std::string subcommand, Context const &, std::string constructor_args_blob);
};
#endiv
#divert <ipp>
#import std.move
hyperledger::fabric::run::Chaincode<hyperledger::fabric::Success>::Chaincode(std::string subcommand, Context const &context, std::string constructor_args_blob)
  : Ancestor{std::move(subcommand), context, std::move(constructor_args_blob)}
{ }
#endiv
