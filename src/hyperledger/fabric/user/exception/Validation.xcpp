// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <fpp>
namespace hyperledger::fabric::user::exception {
  //
  // An exceptional impropriety has been observed in the Enrollment; there is no service
  //
  // Concept:
  //
  //   The exception captures thes sense that the data in the User record is bad.
  //   Such bad data could have originated from the database or from the programmer.
  //   We choose to assert that it came from the database (so it is thus imputed as a runtime error).
  //   The exception is necessarily a runtime error (not a logic error).
  //
  // Usage:
  //
  //   throw exception::Validation{"missing subtle something"};
  //
  class Validation;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.user.exception.Aspects // Aspects (plural) not Aspect (singular)
#import std.runtime_error
class hyperledger::fabric::user::exception::Validation : public Aspects, public std::runtime_error {
  struct Ancestors {
    using Aspect = user::exception::Aspect;
    using Exception = std::runtime_error;
  };
public:
  inline explicit Validation(string::Storage const &reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace hyperledger::fabric::user::exception {
  Validation::Validation(string::Storage const &reason)
    : Ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace hyperledger::fabric::user::exception {
  auto Validation::what() const noexcept -> char const * {
    return Ancestors::Exception::what();
  }
}
#endiv
