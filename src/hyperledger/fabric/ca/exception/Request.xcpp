// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <fpp>
namespace hyperledger::fabric::ca::exception {
  //
  // An exceptional impropriety has been observed in the request; such processing cannot proceed.
  //
  // Concept:
  //
  //   The Python folk called it RequestException
  //
  //   It is a special variant of "invalid argument".
  //   An example is a nonsensical request that is discovered at some point in the processing.
  //
  //   There may be an opportunity for finer-gained signalling with a protocol::exception::Aspect (descendant)
  //
  // Usage:
  //
  //   auto description = "missing magic incantation";
  //   throw exception::Request{description};
  //
  class Request;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.ca.exception.Aspects
#import std.invalid_argument
#import hyperledger.string.Storage
class hyperledger::fabric::ca::exception::Request : public Aspects,
                                                    public std::invalid_argument {
  struct Ancestors {
    using Aspects = ca::exception::Aspects;
    using Exception = std::invalid_argument;
  };
public:
  inline explicit Request(string::Storage const &reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace hyperledger::fabric::ca::exception {
  Request::Request(string::Storage const &reason)
    : Ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace hyperledger::fabric::ca::exception {
  auto Request::what() const noexcept -> char const * {
    return Ancestors::Exception::what();
  }
}
#endiv
