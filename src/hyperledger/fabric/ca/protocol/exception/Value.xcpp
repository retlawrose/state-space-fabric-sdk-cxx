// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <fpp>
namespace hyperledger::fabric::ca::protocol::exception {
  //
  // There is some problem with some value.
  // Descendants only.
  //
  // Concept:
  //
  //   The python folk called it ValueError; we imbue it with a sense of Hyperledger Fabric, and Hyperledger Fabric CA
  //
  //   It is classed as an invalid_argument because it means that the problem could have been assessed prior.
  //   It isn't "just" a runtime error because the problem is within our (this thread's) span of control.
  //
  //   The reason must be a terse explanation.  Not too flowery.
  //   Be cognizant that spewing incorrect values upwards through the error recovery channel is problematic.
  //
  // Usage:
  //
  //   auto name = ...somehow...;    e.g. 'max_enrollments' or 'enrollment_id' or such.
  //   throw exception::Value{"bad name"};
  //
  class Value;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.ca.protocol.exception.Aspects
#import hyperledger.string.Storage
#import std.invalid_argument
class hyperledger::fabric::ca::protocol::exception::Value : public Aspects,
                                                            public std::invalid_argument {
  struct Ancestors {
    using Aspects = protocol::exception::Aspects;
    using Exception = std::invalid_argument;
  };
protected:
  ~Value() = default;
public:
  inline explicit Value(string::Storage const &reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace hyperledger::fabric::ca::protocol::exception {
  Value::Value(string::Storage const &reason)
    : Ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace hyperledger::fabric::ca::protocol::exception {
  auto Value::what() const noexcept -> char const * { return Ancestors::Exception::what(); }
}
#endiv
