// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <fpp>
namespace hyperledger::fabric::ca::protocol::exception {
  //
  // An invariant was violated.
  //
  // Concept:
  //
  //   This pertains to the data; it is a runtime error.
  //   e.g. the caller gave the arguments in the wrong order.
  //
  //   The reason must be a terse explanation.  Not too flowery.
  //   Be cognizant that spewing incorrect values upwards through the error recovery channel is problematic.
  //   As such, the problematic values are not propagated (are not captured).
  //
  // Usage:
  //
  //   throw exception::Invariant{"June < January"};
  //
  class Invariant;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.ca.protocol.exception.Aspects
#import hyperledger.string.Storage
#import std.runtime_error
class hyperledger::fabric::ca::protocol::exception::Invariant : public Aspects,
                                                                public std::runtime_error {
  struct Ancestors {
    using Aspects = protocol::exception::Aspects;
    using Exception = std::runtime_error;
  };
public:
  inline explicit Invariant(string::Storage const &reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace hyperledger::fabric::ca::protocol::exception {
  Invariant::Invariant(string::Storage const &reason)
    : Ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace hyperledger::fabric::ca::protocol::exception {
  auto Invariant::what() const noexcept -> char const * { return Ancestors::Exception::what(); }
}
#endiv
