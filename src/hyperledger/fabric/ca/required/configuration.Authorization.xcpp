// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <fpp>
#import hyperledger.fabric.ca.required.Configuration
#import hyperledger.fabric.ca.required.name.Authorization
namespace hyperledger::fabric::ca::required::configuration {
  //
  // Is this Configuration<NAME> in the universe of Configurations, of Authorizations, as named??
  // a) is a configuration
  // b) is an authorization
  //
  // Usage:
  //
  //   Hack The Spew.
  //
  template<typename CONFIGURATION> concept bool Authorization = requires(CONFIGURATION) {
    typename traits::template Configuration<CONFIGURATION>::Name;
    requires required::Configuration<CONFIGURATION>;
    requires required::name::Authorization<typename traits::template Configuration<CONFIGURATION>::Name>;
  };
}
#endiv
#divert <cpp>
// Of course this is test code
#import hyperledger.fabric.ca.Configuration
namespace {
  namespace tests {
    using namespace hyperledger::fabric::ca;
    static_assert(required::configuration::Authorization<Configuration<PASS>>);
    static_assert(required::configuration::Authorization<Configuration<TOKEN>>);
    //
    static_assert(not required::configuration::Authorization<Configuration<MAIN>>);
    static_assert(not required::configuration::Authorization<Configuration<DRIVER>>);
    //
    static_assert(not required::configuration::Authorization<Configuration<FILES>>);
    static_assert(not required::configuration::Authorization<Configuration<HTTP>>);
    static_assert(not required::configuration::Authorization<Configuration<SOCKET>>);
    static_assert(not required::configuration::Authorization<Configuration<SQLITE>>);
  }
}
#endiv
