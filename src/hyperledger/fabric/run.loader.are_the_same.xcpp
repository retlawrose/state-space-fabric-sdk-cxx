// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <hpp>
namespace hyperledger::fabric::run::loader {
  //
  // An equality comparison where none naturally exists.
  // and it would be problematic to define a universal operator==
  // always and everywhere, even for the odd-but-general data types.
  // See the specializations of loader::Compare<TYPE>
  //
  // Usage:
  //
  //   if (are_the_same(thing1, thing2)) {
  //    ...act upon that...
  //   }
  //
  template<typename TYPE> inline auto are_the_same(TYPE const &, TYPE const &) -> bool;
}
#endiv
#divert <ipp>
#import hyperledger.fabric.run.loader.Compare
template<typename TYPE> auto hyperledger::fabric::run::loader::are_the_same(TYPE const &a, TYPE const &b) -> bool {
  Compare<TYPE> dispatch;
  return dispatch(a, b);
}
#endiv
