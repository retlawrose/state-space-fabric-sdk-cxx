// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace hyperledger::fabric::ip::endpoint {
  //
  // Format an ip::Endpoint
  // A separate type so that ADL will find it.
  //
  struct Formatter;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.ip.Endpoint
#import std.string
namespace hyperledger::fabric::ip {
  inline auto format(Endpoint const &) -> endpoint::Formatter;
  namespace endpoint {
    inline auto to_string(Formatter const &) -> std::string;
  }
}
#import std.basic_ostream
#import hyperledger.fabric.required.Character
#import hyperledger.fabric.required.Character_Traits
namespace hyperledger::fabric::ip::endpoint {
  template<required::Character CHAR, required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#import hyperledger.fabric.detail.Formatter
struct hyperledger::fabric::ip::endpoint::Formatter : public detail::Formatter<Endpoint> {
  using detail::Formatter<Endpoint>::Formatter;
};
#endiv
#divert <ipp>
auto hyperledger::fabric::ip::format(Endpoint const &ee) -> endpoint::Formatter {
  return endpoint::Formatter{ee};
}
#import std.ostringstream
auto hyperledger::fabric::ip::endpoint::to_string(Formatter const &ff) -> std::string {
  std::ostringstream buf;
  buf << ff;
  return buf.str();
}
namespace hyperledger::fabric::ip {
  template<required::Character CHAR, required::Character_Traits TRAITS> auto endpoint::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    o << format(f.value.host);
    if (f.value.port) { o << ':' << format(*f.value.port); }
    return o;
  }
}
#endiv
