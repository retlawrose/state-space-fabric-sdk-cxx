// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <fpp>
#import hyperledger.x509.required
#import openssl.x509.Extension0
#import openssl.x509.Extension
#import openssl.Stack0
#import openssl.Stack
#import std.is_same
namespace hyperledger::x509::constraints {
  //
  // The part of Constraints<M> that is common to Constraints<RO> and Constraints<RW>
  //
  // The list of X.509 extensions
  // Can be used in std::optional<Constraints>
  //
  // The OpenSSL world manages collections with a single macrotized data type "the stack"
  // e.g. STACK_OF(X509_EXTENSION) *extlist = sk_X509_EXTENSION_new_null();
  //
  namespace required {
    using namespace hyperledger::x509::required;
    using namespace std;
    template<typename HELD> concept bool Extension = is_same_v<HELD, openssl::x509::Extension0> || is_same_v<HELD, openssl::x509::Extension>;
    template<typename HELD> concept bool Matching_Management_Sense = is_same_v<HELD, openssl::Stack0<openssl::x509::Extension0>> || is_same_v<HELD, openssl::Stack<openssl::x509::Extension>>;
  }
  template<template<class> class STACK, required::Extension> struct Prototype;
}
#endiv
#divert <hpp>
#forward hyperledger.pki.Certificate
#forward hyperledger.pki.Request
#forward hyperledger.x509.constraints.Constraints.template
namespace hyperledger::x509 {
  template<template<class> class STACK, constraints::required::Extension EXTENSION> struct constraints::Prototype {
    using Held = STACK<EXTENSION>;
    static_assert(required::Matching_Management_Sense<Held>);
    friend class pki::Certificate;
    friend class pki::Request;
    inline explicit Prototype(Held);
  public:
    inline Prototype();
    Prototype(Prototype const &) = delete;
    auto operator=(Prototype const &) -> Prototype & = delete;
    Prototype(Prototype &&) = default;
    auto operator=(Prototype &&) -> Prototype & = default;
    // Get constraints?
    // Only Constraints<RW> can add & modify constraints
  private:
    template<runtime::Management> friend class constraints::Constraints;
    Held held;
  };
}
#endiv
#divert <ipp>
namespace hyperledger::x509::constraints {
  template<template<class> class S, required::Extension E> Prototype<S,E>::Prototype(Held held)  : held{move(held)}  { }
}
#endiv
#divert <cpp>
//
// STACK_OF(X509_EXTENSION) *extlist = sk_X509_EXTENSION_new_null();
// X509_EXTENSION *ext = X509V3_EXT_conf(NULL, NULL, ext_name, ext_value);
// if (nullptr == ext) {
//    throw exception::PKI{"subjectAltName extension"};
// }
// sk_X509_EXTENSION_push(extlist, ext);
// if (!X509_REQ_add_extensions (x509_req, extlist)){
//    throw exception::PKI{"subjectAltName"};
// }
// sk_X509_EXTENSION_pop_free(extlist, X509_EXTENSION_free);
#warning WRITETHIS ... make hyperledger::x509::Constraints do something
#endiv
