// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <fpp>
namespace hyperledger::exception {
  //
  // Like a std::filesystem::filesystem_error but is marked as a hyperledger exception by aspect
  //
  // Concept:
  //
  //   Works like https://en.cppreference.com/w/cpp/filesystem/filesystem_error
  //
  // Design:
  //
  //   Prefer the New School ordering
  //   The old_school ordering is still available.
  //
  // Usage:
  //
  //   throw Filepath{
  //
  class Filepath;
}
#endiv
#divert <hpp>
#import hyperledger.exception.Aspect
#import std.filesystem.filesystem_error
#import hyperledger.file.Path
#import hyperledger.string.Storage
#import std.error_code // NOT hyperledger::error::Code
class hyperledger::exception::Filepath : public Aspect, public std::filesystem::filesystem_error {
  struct Ancestors {
    using Aspect = hyperledger::exception::Aspect;
    using Exception = std::filesystem::filesystem_error;
  };
  struct Arguments {
    using Error = std::error_code;
    using Reason = string::Storage;
    using Path = file::Path;
  };
public:
  using Ancestors::Exception::filesystem_error;
  inline explicit Filepath(Ancestors::Exception const &);
  inline explicit Filepath(Ancestors::Exception &&);
  // New School
  inline explicit Filepath(Arguments::Error const &, Arguments::Reason const &);
  inline explicit Filepath(Arguments::Path const &, Arguments::Error const &, Arguments::Reason const &);
  inline explicit Filepath(Arguments::Path const &, Arguments::Path const &, Arguments::Error const &, Arguments::Reason const &);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace hyperledger::exception {
  Filepath::Filepath(Ancestors::Exception const &previous) : Ancestors::Exception{previous} { }
  Filepath::Filepath(Ancestors::Exception &&previous) : Ancestors::Exception{forward<Ancestors::Exception>(previous)} { }
  Filepath::Filepath(Arguments::Error const &error, Arguments::Reason const &reason) : Ancestors::Exception{reason, error} { }
  Filepath::Filepath(Arguments::Path const &path1, Arguments::Error const &error, Arguments::Reason const &reason) : Ancestors::Exception{reason, path1, error} { }
  Filepath::Filepath(Arguments::Path const &path1, Arguments::Path const &path2, Arguments::Error const &error, Arguments::Reason const &reason) : Ancestors::Exception{reason, path1, path2, error} { }
}
#endiv
#divert <cpp>
auto hyperledger::exception::Filepath::what() const noexcept -> char const * { return Ancestors::Exception::what(); }
#endiv
