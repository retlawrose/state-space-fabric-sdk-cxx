// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <hpp>
#import hyperledger.pki.assemble.template
#forward hyperledger.pki.Secret
#import hyperledger.byte.Span
namespace hyperledger::pki {
  //
  // Given a span of bytes, and some policy choices, reassemble the secret.
  //
  template<> auto assemble<Secret>(byte::Span) -> Secret;
}
#endiv
#divert <cpp>
#import hyperledger.pki.Secret
#ifdef DEPRECATE_DYNAMIC_TYPING_CRYPTO_KEY_PROTOTYPE_ASYMMETRIC_PUBLIC_PRIVATE
import openssl.ec.Key
import openssl.ec.Group
import openssl.ec.group.Name
import openssl.bn.Number
import openssl.bn.convert
import openssl.evp.Keypair
namespace hyperledger::pki {
  template<> auto assemble<Secret>(byte::Span span) -> Secret {
    auto eckey = [span]{
                   auto ky = openssl::ec::Key{};
                   auto bn = openssl::bn::convert<openssl::bn::Number>(span);
                   auto gr = openssl::ec::Group{openssl::ec::group::Name::PRIME256V1};
                   ky.set(bn);
                   ky.set(gr);
                   return ky;
                 }();
    auto evkey = openssl::evp::PKey{};
    pk.assign(eckey);
    return Secret{move(evkey)};
  }
}
#endif
//
// Convert the octets of the Private back into an EC_KEY
//
// Something about ...
// Take the bytes ... put them back in an openssl data structure
// extract the public key from the private key
// extract the bytes of the public key
//
// DER
// d2i_ECPrivateKey(...) ec.h
// i2d_ECPrivateKey(...) ec.h
//
// d2i_ECPublicKey(...) ec.h
// i2d_ECPublicKey(...) ec.h
//
// Octet
// EC_KEY_oct2key
// EC_KEY_oct2priv
// EC_KEY_priv2oct
// EC_KEY_priv2buf
//
// auto EC_KEY_get0_public_key(...) -> EC_POINT const *
// auto EC_KEY_get0_private_key(const EC_KEY *key) -> BIGNUM const *
//
// auto EC_POINT_point2oct(...)
// auto EC_POINT_oct2point(...)
//
// char *BN_bn2hex(const BIGNUM *a);
// char *BN_bn2dec(const BIGNUM *a);
// int BN_hex2bn(BIGNUM **a, const char *str);
// int BN_dec2bn(BIGNUM **a, const char *str);
// int BN_asc2bn(BIGNUM **a, const char *str);
//
#endiv
