// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media.
// The license statement is in the LICENSE file at the top of the repository; this code is licensable under the Apache 2.0 license.
#divert <hpp>
#import hyperledger.json.Object
#import hyperledger.dictionary.Dictionary
namespace hyperledger::dictionary {
  //
  // Convert the dictionary to JSON
  //
  // Usage:
  //
  //   auto dict = Dictionary{...somehow...};
  //   auto jjj = to_json(dict);
  //
  //   auto sss = to_string(jjj); ...and then convert that to a string using json::to_string(Value).
  //
  auto to_json(Dictionary const &) -> json::Object;
}
#endiv
#divert <cpp>
#import hyperledger.dictionary.Pair
#import json.exception.Cast
#import json.value.constants
#import std.int32_t
#import std.uint32_t
#import std.int64_t
#import std.uint64_t
#import std.any_cast
#import std.string
#import std.type_info
auto hyperledger::dictionary::to_json(Dictionary const &dict) -> json::Object {
  auto object = json::Object{::json::value::OBJECT};
  auto keep = [&object](std::string const &name, auto const &value) { object[name] = value; };
  for (auto const &pair : dict) {
    using std::to_string;
    if (pair.second.has_value()) {
      if (false) {
        // Gak.  This is really really clumsy, having to specify all the sizes of the integers.
        // [[FIXTHIS]] Is there a better way?
        // Order these by expected frequency of appearance in hyperledger configurations
      } else if (auto const *value = std::any_cast<std::string>(&pair.second); nullptr != value) {
        // keep(pair.first, *value); // [[FIXTHIS]] can we avoid the copy here?
      } else if (auto const *value = std::any_cast<bool>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else if (auto const *value = std::any_cast<std::uint64_t>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else if (auto const *value = std::any_cast<std::uint32_t>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else if (auto const *value = std::any_cast<std::uint16_t>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else if (auto const *value = std::any_cast<double>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else if (false) {
        //
        // The exotic ones (our exotic ones)
        //
      } else if (auto const *value = std::any_cast<Pair>(&pair.second); nullptr != value) {
        auto array = ::json::Value{::json::value::ARRAY};
        array[0] = value->first;
        array[1] = value->second;
        object[pair.first] = std::move(array);
      } else if (auto const *value = std::any_cast<json::Object>(&pair.second); nullptr != value) {
        object[pair.first] = *value; // this makes a deep copy of the referenced object [[FIXTHIS]] how to make this less copy-full?
      } else if (auto const *value = std::any_cast<Dictionary>(&pair.second); nullptr != value) {
        object[pair.first] = to_json(*value);
      } else if (false) {
        //
        // The infrequent ones
        //
      } else if (auto const *value = std::any_cast<std::int64_t>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else if (auto const *value = std::any_cast<std::int32_t>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else if (auto const *value = std::any_cast<std::int16_t>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else if (auto const *value = std::any_cast<float>(&pair.second); nullptr != value) {
        keep(pair.first, *value);
      } else {
        throw ::json::exception::Cast{"inappropriate configuration value", pair.second.type()};
      }
    }
  }
  return object;
}
#endiv
