// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
// Based on concepts and designs published elsewhere, 2016 & prior in S.C.O.L.D., Wendell Craig Baker, wbaker@scold-lang.org
#divert <fpp>
namespace want::run {
  //
  // Run, with input piped from...
  //   we read
  //   they write (stdout)
  //
  // Usage:
  //
  //   class my::Program : public Piped_From {
  //   public:
  //     Program(...); ....    must choose 'exec' or 'execp' and establish argv[0]
  //   };
  //
  //   Program prog{...};
  //   auto f = prog.start();
  //   prog.stream() >> var1 >> var2 >> var3 >> ...read from it...
  //   auto w = prog.wait();
  //
  //   auto w = prog.run(); ......................  possible but pointless (no input given)
  //
  class Piped_From;
}
#endiv
#divert <hpp>
#import want.run.Runner
#import nonstd.stream.Posix
#import nonstd.stream.Posixbuf
#import std.string
#import std.unique_ptr
#import sys.exits.Code
#import sys.posix.read
class want::run::Piped_From : public Runner {
  using ancestor = Runner;
public:
  inline explicit Piped_From(std::filesystem::path);
  inline Piped_From(Exec, std::filesystem::path);
  using ancestor::run;
  struct results : public ancestor::results {
    using Read = decltype(sys::posix::read(0, nullptr, 0lu));
  };
  auto start() -> results::Start override;
  virtual auto stream() -> std::istream &;
  virtual auto read([[out]] std::string &inbound) -> results::Read;
  virtual auto run(std::string &inbound) -> results::Run;
  virtual auto run() -> results::Run override;
  // override auto wait() -> results::Wait override;
protected:
  using Stream = nonstd::stream::Posix;
  using Streambuf = nonstd::stream::Posixbuf;
  Stream streamobj; // only has a rdbuf buffer pointer after 'start' & before 'run'
  std::unique_ptr<Streambuf> streambuf;
private:
  auto grow_child(/*sys::file::Descriptor const &*/ int writefd) -> sys::exits::Code;
};
#endiv
#divert <ipp>
want::run::Piped_From::Piped_From(std::filesystem::path path)
  : ancestor{path}
  , streamobj{}
  , streambuf{}
{ }
want::run::Piped_From::Piped_From(Exec exec, std::filesystem::path path)
  : ancestor{exec, path}
  , streamobj{}
  , streambuf{}
{ }
#endiv
#divert <cpp>
#import exit
#import std.make_unique
#import std.runtime_error
#import sys.exits.constants
#import sys.posix.close
#import sys.posix.fork
#import sys.posix.pipe
auto want::run::Piped_From::start() -> results::Start {
  if (is_running()) {
    // This is a logic error really, because it means the programmer was operating the API sloppily
    // Use: start() ... run() ... wait()
    throw std::runtime_error{"already running"};
  }
  auto piped = sys::posix::pipe();
  if (!ok(piped)) {
    return results::Start{ok(piped), error_num(piped), value(piped)}; // [[FIXTHIS]] use simplify(piped)
  }
  auto forked = sys::posix::fork();
  if (is_parent(forked)) {
    auto closed = sys::posix::close(write_side(piped));
    if (!ok(closed)) {
      return results::Start{ok(closed), error_num(closed)};
    }
    streambuf = std::make_unique<nonstd::stream::Posixbuf>(read_side(piped), std::ios::in);
    streamobj.rdbuf(streambuf.get());
    running = pid(forked);
  } else if (is_child(forked)) {
    auto closed = sys::posix::close(read_side(piped));
    if (!ok(closed)) {
      exit(sys::exits::OSERR);
    } else {
      exit(grow_child(write_side(piped)));
    }
  }
  fork_invariance_check(forked);
  return results::Start{ok(forked), error_num(forked), value(forked)};  // [[FIXTHIS]] use simplify(forked)
}
auto want::run::Piped_From::stream() -> std::istream & {
  return streamobj;
}
#include <cerrno>
#import ssize_t
auto want::run::Piped_From::read(std::string &inbound) -> results::Read {
  // Pesky ... have to convert from istream's vague non-error indicator to POSIX' precise error indicators.
  //
  // https://en.cppreference.com/w/cpp/io/basic_istream/gcount
  //    gcount() is updated on individual read items
  //    but gcount() is not updated by std::getline(...)
  //
  // Hints at behavior:
  //   https://en.cppreference.com/w/cpp/io/basic_istream/read
  //       <quote>The number of successfully extracted characters can be queried using gcount().</quote>
  //   https://en.cppreference.com/w/cpp/io/basic_istream/readsome
  //       unclear semantic on files; clear intended semantic on tty devices, per Notes.
  //   https://en.cppreference.com/w/cpp/string/basic_string/getline
  //       <quote>Behaves as UnformattedInputFunction, except that input.gcount() is not affected.</quote>
  //
  std::getline(streamobj, inbound);
  bool ok = streamobj.eof() || streamobj.good();
  ssize_t got = ok ? inbound.size() : -1;
  return results::Read{ok, errno, got};
}
auto want::run::Piped_From::run([[out]] std::string &inbound) -> results::Run {
  if (!is_running()) {
    auto started = start();
    if (!ok(started)) {
      return results::Run{ok(started), error_num(started)};
    }
  }
  auto red = read(inbound);
  if (!ok(red)) {
    return results::Run{ok(red), error_num(red)};
  } else {
    return run();
  }
}
auto want::run::Piped_From::run() -> results::Run {
  if (!is_running()) {
    auto started = start();
    if (!ok(started)) {
      return results::Run{ok(started), error_num(started)};
    }
  }
  // We read the rest of the input ... until eof or streamobj failure (if that ever happens).
  for (char c; streamobj >> c; ) {
    continue;
  }
  if (!streamobj.eof()) {
    return results::Run{false, errno};
  }
  streamobj.rdbuf(nullptr);
  delete streambuf.release();
  return ancestor::run();
}
#import std.exception
#import sys.exits.constants
#import sys.posix.close
#import sys.posix.dup2
auto want::run::Piped_From::grow_child(int writefd) -> sys::exits::Code {
  // We're in the child now, NOTHING ESCAPES
  try {
    auto duped = sys::posix::dup2(writefd, 1);
    if (!ok(duped)) {
      dying_utterance(error_code(duped).message());
    } else {
      auto closed = sys::posix::close(writefd);
      if (!ok(closed)) {
        dying_utterance(error_code(closed).message());
      } else {
        auto execed = do_exec();
        dying_utterance(error_code(execed).message());
      }
    }
  } catch (std::exception const &e) {
    dying_utterance(e.what());
    return sys::exits::OSERR;
  } catch (...) {
    dying_utterance("unknown");
  }
  return sys::exits::OSERR;
}
#endiv
