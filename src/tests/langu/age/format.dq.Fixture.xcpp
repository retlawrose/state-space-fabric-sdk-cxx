// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import langu.age.dq // in lieu of namespace format (which doesn't exist)
namespace tests::langu::age::format::dq {
  namespace [[eponymous]] fixture {
    namespace library = ::langu::age;
    class Fixture;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.filesystem.path
struct tests::langu::age::format::dq::fixture::Fixture : public cppunit::test::Fixture {
  using Specimen = ::std::filesystem::path;
  // The subject is a function ... see <ipp>
  auto test_empty() -> void;
  auto test_slash() -> void;
  auto test_length_0() -> void;
  auto test_length_1() -> void;
  auto test_length_2() -> void;
  auto test_length_3() -> void;
  auto test_spaces() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <ipp>
#import langu.age.dq
namespace tests::langu::age::format::dq::fixture {
  // WATCHOUT - the enclosing namespace dq occludes ADL for langu::age::dq(...)
  //
  using ::langu::age::dq; // <------------------------------ the subject of this test
}
#endiv
#divert <cpp>
#import std.ostringstream
namespace tests::langu::age::format::dq::fixture {
  auto Fixture::test_empty() -> void {
    auto adorned = Specimen{""};
    std::ostringstream buf;
    buf << dq(adorned);
    auto const actual = buf.str();
    auto const expected = ""s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_slash() -> void {
    auto adorned = Specimen{"/"};
    std::ostringstream buf;
    buf << dq(adorned);
    auto const actual = buf.str();
    auto const expected = "/"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_length_0() -> void {
    auto adorned = Specimen{""};
    std::ostringstream buf;
    buf << dq(adorned);
    auto const actual = buf.str();
    auto const expected = ""s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_length_1() -> void {
    auto adorned = Specimen{"a"};
    std::ostringstream buf;
    buf << dq(adorned);
    auto const actual = buf.str();
    auto const expected = "a"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_length_2() -> void {
    auto adorned = Specimen{"bb"};
    std::ostringstream buf;
    buf << dq(adorned);
    auto const actual = buf.str();
    auto const expected = "bb"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_length_3() -> void {
    auto adorned = Specimen{"ccc"};
    std::ostringstream buf;
    buf << dq(adorned);
    auto const actual = buf.str();
    auto const expected = "ccc"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_spaces() -> void {
    auto adorned = Specimen{"/build me a castle in the sky"};
    std::ostringstream buf;
    buf << dq(adorned);
    auto const actual = buf.str();
    auto const expected = "/build me a castle in the sky"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}
#import rigging.suite.io
auto tests::langu::age::format::dq::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"dq"};
  series << call("empty", &Fixture::test_empty)
         << call("slash", &Fixture::test_slash)
         << call("length-0", &Fixture::test_length_0)
         << call("length-1", &Fixture::test_length_1)
         << call("length-2", &Fixture::test_length_2)
         << call("length-3", &Fixture::test_length_3)
         << call("spaces", &Fixture::test_spaces)
         << END;
  return finalize(series);
}
#endiv
