// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import langu.age
namespace tests::langu::age::format {
  namespace [[eponymous]] fixture {
    namespace library = ::langu::age;
    class Fixture;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::langu::age::format::fixture::Fixture : public cppunit::test::Fixture {
  auto test_usage_dq() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.filesystem.path
#import std.ostringstream
#import langu.age.dq
auto tests::langu::age::format::fixture::Fixture::test_usage_dq() -> void {
  auto adorned = std::filesystem::path{"/build/Hyperledger Fabric/Program Files"};
  std::ostringstream buf;
  buf << library::dq(adorned);
  auto const actual = buf.str();
  auto const expected = "/build/Hyperledger Fabric/Program Files"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import tests.langu.age.format.dq.Fixture
#import rigging.suite.io
auto tests::langu::age::format::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"format"};
  series << []() {
              auto use = Stream{"usage"};
              use << call("dq", &Fixture::test_usage_dq)
                  << END;
              return move(use);
            }()
         << add<dq::Fixture>()
         << END;
  return finalize(series);
}
#endiv
