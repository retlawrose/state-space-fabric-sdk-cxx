// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import nonstd.filesystem
namespace tests::nonstd::filesystem {
  namespace [[eponymous]] fixture {
    class Fixture;
    namespace library = ::nonstd::filesystem;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::nonstd::filesystem::fixture::Fixture : public cppunit::test::Fixture {
  auto test_usage_dequote() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.filesystem.dequote
namespace tests::nonstd::filesystem::fixture {
  auto Fixture::test_usage_dequote() -> void {
    auto const specimen = R"path("/tmp")path"s;
    auto const actual = library::dequote(specimen);
    auto const expected = "/tmp"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}
#import tests.nonstd.filesystem.dequote.Fixture
#import rigging.suite.io
auto tests::nonstd::filesystem::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"filesystem"};
  series << []{
              auto use = Stream{"usage"};
              use << call("dequote", &Fixture::test_usage_dequote)
                  << END;
              return move(use);
            }()
         << add<dequote::Fixture>()
         << END;
  return finalize(series);
}
#endiv
