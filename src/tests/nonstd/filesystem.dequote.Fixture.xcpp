// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import nonstd.filesystem
namespace tests::nonstd::filesystem::dequote {
  namespace fixture {
    class Fixture;
    namespace library = ::nonstd::filesystem;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.filesystem.path
struct tests::nonstd::filesystem::dequote::Fixture : public cppunit::test::Fixture {
  auto test_empty() -> void;
  auto test_slash() -> void;
  auto test_length_0() -> void;
  auto test_length_1() -> void;
  auto test_length_2() -> void;
  auto test_length_3() -> void;
  auto test_spaces() -> void;
  static auto suite() -> cppunit::Test *;
  using Specimen = std::filesystem::path;
};
#endiv
#divert <cpp>
#import nonstd.filesystem.dequote
namespace tests::nonstd::filesystem::dequote::fixture {
  auto Fixture::test_empty() -> void {
    auto adorned = Specimen{""};
    auto un = library::dequote(adorned);
    auto const actual = un;
    auto const expected = ""s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_slash() -> void {
    auto adorned = Specimen{"/"};
    auto un = library::dequote(adorned);
    auto const actual = un;
    auto const expected = "/"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_length_0() -> void {
    auto adorned = Specimen{""};
    auto un = library::dequote(adorned);
    auto const actual = un;
    auto const expected = ""s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_length_1() -> void {
    auto adorned = Specimen{"a"};
    auto un = library::dequote(adorned);
    auto const actual = un;
    auto const expected = "a"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_length_2() -> void {
    auto adorned = Specimen{"bb"};
    auto un = library::dequote(adorned);
    auto const actual = un;
    auto const expected = "bb"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_length_3() -> void {
    auto adorned = Specimen{"ccc"};
    auto un = library::dequote(adorned);
    auto const actual = un;
    auto const expected = "ccc"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  auto Fixture::test_spaces() -> void {
    auto adorned = Specimen{"/build me a castle in the sky"};
    auto un = library::dequote(adorned);
    auto const actual = un;
    auto const expected = "/build me a castle in the sky"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}
#import rigging.suite.io
namespace tests::nonstd::filesystem::dequote::fixture {
  auto Fixture::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"dequote"};
    series << call("empty", &Fixture::test_empty)
           << call("slash", &Fixture::test_slash)
           << call("length-0", &Fixture::test_length_0)
           << call("length-1", &Fixture::test_length_1)
           << call("length-2", &Fixture::test_length_2)
           << call("length-3", &Fixture::test_length_3)
           << call("spaces", &Fixture::test_spaces)
           << END;
    return finalize(series);
  }
}
#endiv
