// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.crypto.number
namespace tests::crypto::number {
  namespace fixture {
    class Fixture;
    namespace library = ::hyperledger::crypto::number;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::crypto::number::fixture::Fixture : public cppunit::test::Fixture {
  auto test_usage_Number() -> void;
  auto test_usage_literals() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import hyperledger.crypto.number.Number
#import hyperledger.crypto.number.literals
namespace tests::crypto::number::fixture {
  auto Fixture::test_usage_Number() -> void {
    using Subject = library::Number;
    auto subject = Subject{};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Fixture::test_usage_literals() -> void {
    using namespace library::literals;
    auto zero = 0_number;
    auto one = "1"_number;
    CPPUNIT_ASSERT(zero != one);
  }
}
#import tests.crypto.number.Number
#import tests.crypto.number.Expression
#import tests.crypto.number.Comparison
#import rigging.suite.io
auto tests::crypto::number::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"number"};
  series << []{
              auto use = Stream{"usage"};
              use << call("Number", &Fixture::test_usage_Number)
                  << call("literals", &Fixture::test_usage_literals)
                  << END;
              return move(use);
            }()
         << add<Number>()
         << add<Comparison>()
         << add<Expression>()
         << END;
  return finalize(series);
}
#endiv
