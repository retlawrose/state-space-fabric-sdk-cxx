// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::call { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::call::Fixture : public cppunit::test::Fixture {
public:
  auto test_Function() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import hyperledger.fabric.peer.chaincode.Function
auto tests::unit::call::Fixture::test_Function() -> void {
  using ::hyperledger::fabric::peer::chaincode::packaging::call::function::Function;
  Function heavy = Function::HEAVY;
  CPPUNIT_ASSERT(Function::INVOKE == heavy);
  auto light = Function::LIGHT;
  CPPUNIT_ASSERT(Function::QUERY == light);
}
#import rigging.suite.io
auto tests::unit::call::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  using rigging::suite::call;
  auto series = Stream{"call"};
  series << call("Function", &Fixture::test_Function)
         << END;
  return finalize(series);
}
#endiv
