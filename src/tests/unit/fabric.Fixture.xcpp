// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.fabric
namespace tests::unit::fabric {
  namespace fixture {
    class Fixture;
    namespace library = ::hyperledger::fabric;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::fabric::fixture::Fixture : public cppunit::test::Fixture {
  auto test_Context() -> void;
  auto test_Contact() -> void;
  auto test_exception_Aspect() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Exceptional;
};
#endiv
#divert <cpp>
#import hyperledger.Boolean
#import hyperledger.fabric.v0.Context
#import hyperledger.fabric.v0.Contact
#import hyperledger.Outcome
#import hyperledger.Success
#import tests.unit.fabric.Fixture.Exceptional
namespace tests::unit::fabric::fixture {
  auto Fixture::test_Context() -> void {
    using namespace ::hyperledger::fabric;
    struct Subject : public Context {
      // turns out there are no fields in hyperledger::fabric::v0::Context; nothing at all.
    } subject;
    CPPUNIT_ASSERT(0 == sizeof(subject) || 0 != sizeof (subject));
  }
  auto Fixture::test_Contact() -> void {
    using namespace ::hyperledger::fabric;
    struct Subject : public Contact {
    } subject;
    CPPUNIT_ASSERT(!subject.auth);
    CPPUNIT_ASSERT(!subject.client);
  }
  auto Fixture::test_exception_Aspect() -> void {
    try {
      throw Exceptional{"boring"};
    } catch (::hyperledger::fabric::exception::Aspect const &e) {
      auto const what = std::string{e.what()};
      CPPUNIT_ASSERT_EQUAL("boring"s, what);
    }
  }
}
#import rigging.suite.io
auto tests::unit::fabric::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"fabric"};
  series << []() {
              auto dup = Stream{"duplicates"};
              dup << call("Context", &Fixture::test_Context)
                  << call("Contact", &Fixture::test_Contact)
                  << END;
              return move(dup);
            }()
         << []() {
              auto exc = Stream{"exception"};
              exc << call("Aspect", &Fixture::test_exception_Aspect)
                  << END;
              return move(exc);
            }()
         << END;
  return finalize(series);
}
#endiv
