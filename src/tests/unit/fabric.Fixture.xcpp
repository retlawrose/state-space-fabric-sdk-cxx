// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace tests::unit::fabric { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::fabric::Fixture : public cppunit::test::Fixture {
public:
  auto test_Boolean() -> void;
  auto test_Context() -> void;
  auto test_Contact() -> void;
  auto test_Outcome() -> void;
  auto test_Success() -> void;
  auto test_exception_Aspect() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Exceptional;
};
#endiv
#divert <cpp>
#import hyperledger.fabric.Boolean
auto tests::unit::fabric::Fixture::test_Boolean() -> void {
  using namespace ::hyperledger::fabric;
  auto b = Boolean{true};
  CPPUNIT_ASSERT(b);
  b = false;
  CPPUNIT_ASSERT(!b);
}
#import hyperledger.fabric.Context
auto tests::unit::fabric::Fixture::test_Context() -> void {
  using namespace ::hyperledger::fabric;
  struct Subject : public Context {
    // turns out there are no fields in hyperledger::fabric::Context; nothing at all.
  } subject;
  CPPUNIT_ASSERT(0 == sizeof(subject) || 0 != sizeof (subject));
}
#import hyperledger.fabric.Contact
auto tests::unit::fabric::Fixture::test_Contact() -> void {
  using namespace ::hyperledger::fabric;
  struct Subject : public Contact {
  } subject;
  CPPUNIT_ASSERT(!subject.auth);
  CPPUNIT_ASSERT(!subject.client);
}
#import hyperledger.fabric.Outcome
auto tests::unit::fabric::Fixture::test_Outcome() -> void {
  using namespace ::hyperledger::fabric;
  Outcome<int> subject{3};
  CPPUNIT_ASSERT(ok(subject));
  CPPUNIT_ASSERT(3 == value(subject));
}
#import hyperledger.fabric.Success
auto tests::unit::fabric::Fixture::test_Success() -> void {
  using namespace ::hyperledger::fabric;
  Success subject{SUCCESS};
  CPPUNIT_ASSERT(ok(subject));
}
#import tests.unit.fabric.Fixture.Exceptional
auto tests::unit::fabric::Fixture::test_exception_Aspect() -> void {
  try {
    throw Exceptional{"boring"};
  } catch (::hyperledger::fabric::exception::Aspect const &e) {
    auto const what = std::string{e.what()};
    CPPUNIT_ASSERT_EQUAL("boring"s, what);
  }
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::fabric::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("fabric");
  series << call("Boolean", &Fixture::test_Boolean)
         << call("Context", &Fixture::test_Context)
         << call("Contact", &Fixture::test_Contact)
         << call("Outcome", &Fixture::test_Outcome)
         << call("Success", &Fixture::test_Success)
         << call("exception::Aspect", &Fixture::test_exception_Aspect)
    ;
  return series.release();
}
#endiv
