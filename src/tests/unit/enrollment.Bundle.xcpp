// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.fabric.ca.enrollment
namespace tests::unit::enrollment {
  namespace [[eponymous]] bundle {
    class Bundle;
    namespace library = ::hyperledger::fabric::ca::enrollment;
  }
  using bundle::Bundle;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import hyperledger.fabric.ca.enrollment.Bundle
#import hyperledger.Dictionary
struct tests::unit::enrollment::Bundle : public cppunit::test::Fixture {
  using Subject = library::Bundle;
  using Dictionary = hyperledger::Dictionary;
  auto test_constructor_default() -> void;
  auto test_constructor_copy() -> void;
  auto test_constructor_move() -> void;
  auto test_assignment_copy() -> void;
  auto test_assignment_move() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.is_copy_constructible
#import std.is_copy_assignable
#import std.any_cast
namespace tests::unit::enrollment::bundle {
  auto Bundle::test_constructor_default() -> void {
    auto subject = Subject{}; // <------------------------------ test th is
    CPPUNIT_ASSERT(subject.empty());
    CPPUNIT_ASSERT(subject.secret.empty());
    CPPUNIT_ASSERT(subject.empty());
    CPPUNIT_ASSERT(!subject.profile);
  }
  auto Bundle::test_constructor_copy() -> void {
    static_assert(not std::is_copy_constructible_v<Subject>);
#if 0
    if constexpr(std::is_copy_constructible_v<Subject>) {
      auto specimen = Subject{"name", "seekrit", Dictionary{{"pay"s,"load"s}}, "tls"s};
      Subject subject{specimen}; // <------------------------------ test th is
      CPPUNIT_ASSERT_EQUAL("name"s, subject.name);
      CPPUNIT_ASSERT_EQUAL("seekrit"s, subject.secret);
      CPPUNIT_ASSERT_EQUAL("load"s, subject.attr_reqs["pay"]);
      CPPUNIT_ASSERT_EQUAL("tls"s, *subject.profile);
    }
#endif
  }
  auto Bundle::test_constructor_move() -> void {
    auto specimen = Subject{"name", "seekrit", Dictionary{{"pay"s,"load"s}}, "tls"s};
    Subject subject{move(specimen)}; // <------------------------------ test th is
    CPPUNIT_ASSERT_EQUAL("name"s, subject.name);
    CPPUNIT_ASSERT_EQUAL("seekrit"s, subject.secret);
    CPPUNIT_ASSERT_EQUAL("load"s, std::any_cast<std::string>(subject.attr_reqs["pay"]));
    CPPUNIT_ASSERT_EQUAL("tls"s, *subject.profile);
  }
  auto Bundle::test_assignment_copy() -> void {
    static_assert(not std::is_copy_assignable_v<Subject>);
#if 0
    if constexpr(std::is_copy_assignable_v<Subject>) {
      auto specimen = Subject{"name", "seekrit", Dictionary{{"pay"s,"load"s}}, "tls"s};
      Subject subject;
      subject = specimen; // <------------------------------ test th is
      CPPUNIT_ASSERT_EQUAL("name"s, subject.name);
      CPPUNIT_ASSERT_EQUAL("seekrit"s, subject.secret);
      CPPUNIT_ASSERT_EQUAL("load"s, subject.attr_reqs["pay"]);
      CPPUNIT_ASSERT_EQUAL("tls"s, *subject.profile);
    }
#endif
  }
  auto Bundle::test_assignment_move() -> void {
    auto specimen = Subject{"name", "seekrit", Dictionary{{"pay"s,"load"s}}, "tls"s};
    Subject subject;
    subject = move(specimen); // <------------------------------ test th is
    CPPUNIT_ASSERT_EQUAL("name"s, subject.name);
    CPPUNIT_ASSERT_EQUAL("seekrit"s, subject.secret);
    CPPUNIT_ASSERT_EQUAL("load"s, std::any_cast<std::string>(subject.attr_reqs["pay"]));
    CPPUNIT_ASSERT_EQUAL("tls"s, *subject.profile);
  }
}
#import rigging.suite.io
auto tests::unit::enrollment::bundle::Bundle::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"Bundle"};
  series << []() {
              auto con = Stream{"constructor"};
              con << call("default", &Bundle::test_constructor_default)
                  << call("copy", &Bundle::test_constructor_copy)
                  << call("move", &Bundle::test_constructor_move)
                  << END;
              return move(con);
            }()
         << []()  {
              auto ass = Stream{"assignment"};
              ass << call("copy", &Bundle::test_constructor_copy)
                  << call("move", &Bundle::test_constructor_move)
                  << END;
              return move(ass);
            }()
         << END;
  return finalize(series);
}
#endiv
