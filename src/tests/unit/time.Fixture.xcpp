// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.time
namespace tests::unit::time {
  namespace fixture {
    class Fixture;
    namespace library = ::hyperledger::time;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::time::fixture::Fixture : public cppunit::test::Fixture {
  auto test_Clock() -> void;
  auto test_Duration() -> void;
  auto test_Point() -> void;
  auto test_put() -> void;
  auto test_to_string() -> void;
  auto test_literals() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import hyperledger.time.Clock
#import hyperledger.time.Duration
#import hyperledger.time.Point
#import hyperledger.time.literals
#import hyperledger.time.point.put
#import hyperledger.time.point.to_string
#import std.ostringstream
namespace tests::unit::time::fixture {
  auto Fixture::test_Clock() -> void {
    using Subject = library::Clock;
    auto subject = Subject{};
    CPPUNIT_ASSERT(sizeof (subject));
    auto zero = library::Point{};
    auto then = Subject::now();
    CPPUNIT_ASSERT(zero != then);
  }
  auto Fixture::test_Duration() -> void {
    using Subject = library::Duration;
    auto zero = Subject{};
    auto one = Subject{1};
    CPPUNIT_ASSERT(zero != one);
  }
  auto Fixture::test_Point() -> void {
    using Subject = library::Point;
    auto zero = Subject{};
    auto then = library::Clock::now();
    CPPUNIT_ASSERT(zero != then);
  }
  auto Fixture::test_put() -> void {
    auto then = library::Clock::now();
    auto buf = std::ostringstream{};
    buf << library::point::put(then, "%FT%T");
    auto sss = buf.str();
    // This is supposed to be in RFC 3339 format
    CPPUNIT_ASSERT(!sss.empty());
  }
  auto Fixture::test_to_string() -> void {
    auto then = library::Clock::now();
    auto sss = library::point::to_string(then, "%F %T");
    // This is supposed to be in RFC 3339 format
    CPPUNIT_ASSERT(!sss.empty());
  }
  auto Fixture::test_literals() -> void {
    using namespace library::literals;
    auto sec = 1s;
    CPPUNIT_ASSERT(library::Duration{} != sec);
  }
}
#import rigging.suite.io
auto tests::unit::time::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"time"};
  series << call("Clock", &Fixture::test_Clock)
         << call("Duration", &Fixture::test_Duration)
         << call("Point", &Fixture::test_Point)
         << call("put", &Fixture::test_put)
         << call("to_string", &Fixture::test_to_string)
         << call("literals", &Fixture::test_literals)
         << END;
  return finalize(series);
}
#endiv
