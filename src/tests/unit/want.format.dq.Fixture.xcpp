// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::want::format::dq { class Fixture; }
#endiv
#divert <hpp>
class tests::unit::want::format::dq::Fixture : public cppunit::test::Fixture {
public:
  auto test_empty() -> void;
  auto test_slash() -> void;
  auto test_length_0() -> void;
  auto test_length_1() -> void;
  auto test_length_2() -> void;
  auto test_length_3() -> void;
  auto test_spaces() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.filesystem.path
#import want.format.dq
auto tests::unit::want::format::dq::Fixture::test_empty() -> void {
  using namespace ::want::format;; // WATCHOUT - the enclosing namespace dq occludes ::want::format::dq in ADL
  using ::want::format::dq;
  auto adorned = std::filesystem::path{""};
  std::ostringstream buf;
  buf << dq(adorned);
  auto const actual = buf.str();
  auto const expected = ""s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::want::format::dq::Fixture::test_slash() -> void {
  using ::want::format::dq;
  auto adorned = std::filesystem::path{"/"};
  std::ostringstream buf;
  buf << dq(adorned);
  auto const actual = buf.str();
  auto const expected = "/"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::want::format::dq::Fixture::test_length_0() -> void {
  using ::want::format::dq;
  auto adorned = std::filesystem::path{""};
  std::ostringstream buf;
  buf << dq(adorned);
  auto const actual = buf.str();
  auto const expected = ""s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::want::format::dq::Fixture::test_length_1() -> void {
  using ::want::format::dq;
  auto adorned = std::filesystem::path{"a"};
  std::ostringstream buf;
  buf << dq(adorned);
  auto const actual = buf.str();
  auto const expected = "a"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::want::format::dq::Fixture::test_length_2() -> void {
  using ::want::format::dq;
  auto adorned = std::filesystem::path{"bb"};
  std::ostringstream buf;
  buf << dq(adorned);
  auto const actual = buf.str();
  auto const expected = "bb"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::want::format::dq::Fixture::test_length_3() -> void {
  using ::want::format::dq;
  auto adorned = std::filesystem::path{"ccc"};
  std::ostringstream buf;
  buf << dq(adorned);
  auto const actual = buf.str();
  auto const expected = "ccc"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::want::format::dq::Fixture::test_spaces() -> void {
  using ::want::format::dq;
  auto adorned = std::filesystem::path{"/build me a castle in the sky"};
  std::ostringstream buf;
  buf << dq(adorned);
  auto const actual = buf.str();
  auto const expected = "/build me a castle in the sky"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::want::format::dq::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"dq"};
  series << call("empty", &Fixture::test_empty)
         << call("slash", &Fixture::test_slash)
         << call("length-0", &Fixture::test_length_0)
         << call("length-1", &Fixture::test_length_1)
         << call("length-2", &Fixture::test_length_2)
         << call("length-3", &Fixture::test_length_3)
         << call("spaces", &Fixture::test_spaces)
         << END;
  return finalize(series);
}
#endiv
