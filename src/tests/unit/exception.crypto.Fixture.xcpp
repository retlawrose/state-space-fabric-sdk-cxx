// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.crypto.exception
namespace tests::unit::exception::crypto {
  namespace fixture {
    class Fixture;
    namespace library = ::hyperledger::crypto::exception;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::exception::crypto::fixture::Fixture : public cppunit::test::Fixture {
  auto test_Aspect() -> void;
  auto test_Decrypt() -> void;
  auto test_Deterministic() -> void;
  auto test_Encrypt() -> void;
  auto test_Sign() -> void;
  auto test_Validate() -> void;
  auto test_Syntax() -> void;
  auto test_Value() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Runtime;
};
#endiv
#divert <cpp>
#import hyperledger.crypto.exception.Aspect
#import tests.unit.exception.crypto.Fixture.Runtime
auto tests::unit::exception::crypto::fixture::Fixture::test_Aspect() -> void {
  try {
    throw Runtime{};
  } catch (library::Aspect const &) {
    CPPUNIT_ASSERT(true);
    return;
  }
  CPPUNIT_ASSERT(false);
}
#import hyperledger.crypto.exception.Decrypt
auto tests::unit::exception::crypto::fixture::Fixture::test_Decrypt() -> void {
  using Subject = library::Decrypt;
  Subject subject{};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import hyperledger.crypto.exception.Deterministic
auto tests::unit::exception::crypto::fixture::Fixture::test_Deterministic() -> void {
  using Subject = library::Deterministic;
  Subject subject{};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import hyperledger.crypto.exception.Encrypt
auto tests::unit::exception::crypto::fixture::Fixture::test_Encrypt() -> void {
  using Subject = library::Encrypt;
  Subject subject{};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import hyperledger.crypto.exception.Sign
auto tests::unit::exception::crypto::fixture::Fixture::test_Sign() -> void {
  using Subject = library::Sign;
  Subject subject{"NaN"};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import hyperledger.crypto.exception.Validate
auto tests::unit::exception::crypto::fixture::Fixture::test_Validate() -> void {
  using Subject = library::Validate;
  Subject subject{"not.valid."};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import rigging.suite.io
auto tests::unit::exception::crypto::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"crypto"};
  series << call("Aspect", &Fixture::test_Aspect)
         << call("Deterministic", &Fixture::test_Deterministic)
         << call("Encrypt", &Fixture::test_Encrypt)
         << call("Sign", &Fixture::test_Sign)
         << call("Validate", &Fixture::test_Validate)
         << END;
  return finalize(series);
}
#endiv
