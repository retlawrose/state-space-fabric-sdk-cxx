// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::pki { class Fixture; }
#endiv
#divert <hpp>
class tests::unit::pki::Fixture : public cppunit::test::Fixture {
public:
  auto test_Triple() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import hyperledger.fabric.pki.Triple
auto tests::unit::pki::Fixture::test_Triple() -> void {
  using namespace hyperledger::fabric::pki;
  Triple<std::vector<std::byte>> vb; // <--------------- test this ... does it compile?
  Triple<std::vector<char>> vc;
  Triple<std::string> s;
  Triple<std::filesystem::path> fp;
  CPPUNIT_ASSERT(vb.ca.empty() && vc.ca.empty() && s.ca.empty() && fp.ca.empty()); // irrelevant test ... use the variable to shutup the compiler
  Triple<std::optional<std::vector<std::byte>>> ovb; // <--------------- test this ... does it compile?
  Triple<std::optional<std::vector<char>>> ovc;
  Triple<std::optional<std::string>> os;
  Triple<std::optional<std::filesystem::path>> ofp;
  CPPUNIT_ASSERT(!ovb.ca && !ovc.ca && !os.ca && !ofp.ca); // irrelevant test ... use the use variable
}
auto tests::unit::pki::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"pki"};
  series << call("Triple", &Fixture::test_Triple)
         << END;
  return finalize(series);
}
#endiv
