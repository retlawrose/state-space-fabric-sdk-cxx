// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.base64
namespace tests::unit::base64 {
  namespace fixture {
    class Fixture;
    namespace library = ::hyperledger::base64;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import hyperledger.string.Storage
struct tests::unit::base64::fixture::Fixture : public cppunit::test::Fixture {
  auto test_roundtrip_0() -> void;
  auto test_roundtrip_1() -> void;
  auto test_roundtrip_2() -> void;
  auto test_roundtrip_3() -> void;
  auto test_roundtrip_4() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  using String = ::hyperledger::string::Storage;
};
#endiv
#divert <cpp>
#import hyperledger.base64.decode
#import hyperledger.base64.encode
namespace tests::unit::base64::fixture {
  auto Fixture::test_roundtrip_0() -> void {
    auto const specimen = ""s;
    auto const finished = library::decode<String>(library::encode(specimen));
    auto const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, finished);
  }
  auto Fixture::test_roundtrip_1() -> void {
    auto const specimen = "apple,banana,cherry"s;
    auto const finished = library::decode<String>(library::encode(specimen));
    auto const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, finished);
  }
  auto Fixture::test_roundtrip_2() -> void {
    auto const specimen = "0123456789"s;
    auto const finished = library::decode<String>(library::encode(specimen));
    // auto const intermediate = "MDEyMzQ1Njc4OQ=="s;
    CPPUNIT_ASSERT_EQUAL(specimen, finished);
  }
  auto Fixture::test_roundtrip_3() -> void {
    auto const specimen = "\001\002\003\004\005\006\007\010\011"s;
    auto const finished = library::decode<String>(library::encode(specimen));
    auto const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, finished);
  }
  auto Fixture::test_roundtrip_4() -> void {
    std::string specimen;
    auto count = 0u;
    for (char c{'a'}, e('z'+1); e != c; ++c, ++count) {
      specimen.push_back(c);
      auto const finished = library::decode<String>(library::encode(specimen));
      auto const expected = specimen;
      CPPUNIT_ASSERT_EQUAL(expected, finished);
    }
    CPPUNIT_ASSERT(26 == count);
  }
}
#import tests.unit.base64.decode.Fixture
#import tests.unit.base64.encode.Fixture
#import rigging.suite.io
auto tests::unit::base64::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"base64"};
  series << []() {
              auto roun = Stream{"roundtrip"};
              roun << call("0", &Fixture::test_roundtrip_0)
                   << call("1", &Fixture::test_roundtrip_1)
                   << call("2", &Fixture::test_roundtrip_2)
                   << call("3", &Fixture::test_roundtrip_3)
                   << call("4", &Fixture::test_roundtrip_4)
                   << END;
              return move(roun);
            }()
         << add<decode::Fixture>()
         << add<encode::Fixture>()
         << END;
  return finalize(series);
}
#endiv
