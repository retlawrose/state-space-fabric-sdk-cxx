// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.ip
#import hyperledger.tls
#import hyperledger.net.endpoint
namespace tests::unit::tls {
  namespace [[eponymous]] fixture {
    class Fixture;
    namespace library = ::hyperledger::tls;
    namespace ip = ::hyperledger::ip;
    namespace net = ::hyperledger::net::endpoint;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::tls::fixture::Fixture : public cppunit::test::Fixture {
  auto test_get_port_one() -> void;
  auto test_get_port_many() -> void;
  auto test_get_hostport_one() -> void;
  auto test_get_hostport_many() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <ipp>
#import hyperledger.Outcome
namespace tests::unit::tls::fixture {
  using ::hyperledger::Outcome;
}
#endiv
#divert <cpp>
#import hyperledger.net.endpoint.get_port
#import std.cerr
namespace tests::unit::tls::fixture {
  auto tests::unit::tls::Fixture::test_get_port_one() -> void {
    auto got = net::get_port("8081");
    CPPUNIT_ASSERT(ok(got));
    auto val = value(got);
    CPPUNIT_ASSERT((unsigned) 8081 == (unsigned) val);
  }
  auto tests::unit::tls::Fixture::test_get_port_many() -> void {
    using net::get_port;
    auto all = true;
    std::cerr << "all: ";
    auto const expect = [&all](bool expected, Outcome<ip::Port> oc) {
                          all &= expected == ok(oc);
                          std::cerr << all;
                        };
    expect(false, get_port(""));
    expect(true, get_port("1"));
    expect(true, get_port("20"));
    expect(true, get_port("80"));
    expect(true, get_port("8080"));
    expect(true, get_port("07050"));
    expect(true, get_port("00007050"));
    expect(false, get_port("70050"));
    expect(false, get_port("0"));
    expect(false, get_port("-1"));
    expect(false, get_port("apple"));
    expect(false, get_port("banana"));
    expect(false, get_port(":80"));
    std::cerr << '\n';
    CPPUNIT_ASSERT(all);
  }
}
#import hyperledger.net.endpoint.get_hostport
#import hyperledger.ip.Host
#import hyperledger.ip.host.Formatter
#import std.get
namespace tests::unit::tls::fixture {
  auto tests::unit::tls::Fixture::test_get_hostport_one() -> void {
    auto got = net::get_hostport("bow.wow:7051");
    CPPUNIT_ASSERT(ok(got));
    auto val = value(got);
    auto host = std::get<0>(val);
    auto port = std::get<1>(val);
#warning [[FIXTHIS]] make ADL Find to_string(Host)
    CPPUNIT_ASSERT("bow.wow"s == ip::host::to_string(host)); // [[FIXTHIS]] make ADL Find to_string(Host)
    CPPUNIT_ASSERT((unsigned) 7051 == (unsigned) port);
  }
  auto tests::unit::tls::Fixture::test_get_hostport_many() -> void {
    using net::get_hostport;
    auto all = true;
    std::cerr << "all: ";
    auto const expect = [&all](bool expected, Outcome<std::tuple<ip::Host, ip::Port>> oc) {
                          auto g = expected == ok(oc);
                          all &= g;
                          std::cerr << '(' << g << all << ')';
                        };
    expect(false, get_hostport(""));
    expect(true, get_hostport("h:1"));
    expect(true, get_hostport("lo.c.a.host:20"));
    expect(true, get_hostport("80.com"));
    expect(true, get_hostport("80.co:80"));
    expect(true, get_hostport("7.8.9.100"));
    expect(true, get_hostport("7.8.9.1000")); // OK ........... we don't check IPv4 address validity here
    expect(true, get_hostport("[2001:::db8::1]")); // OK ...... we don't check IPv6 address validity here
    expect(true, get_hostport("[2001:::db8::1]:99")); // OK ... we don't check IPv6 address validity here
    expect(true, get_hostport("2001:::db8::1")); // ambiguous ...... looks like a trailing port :1 but should have been [2001:db8::1]
    expect(true, get_hostport("7.8.9.10:11"));
    expect(true, get_hostport("0"));
    expect(true, get_hostport("-1"));   // OK ...... begins with a dash, but ... is a valid hostname
    expect(true, get_hostport("apple"));
    expect(true, get_hostport("banana"));
    expect(false, get_hostport(":80"));
    std::cerr << '\n';
    CPPUNIT_ASSERT(all);
  }
}
#import tests.unit.tls.Endpoint
#import tests.unit.tls.Endpoints
#import tests.unit.tls.From_String
#import rigging.suite.io
auto tests::unit::tls::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"tls"};
  series << add<Endpoint>()
         << add<Endpoints>()
         << add<From_String>()
         << []() {
              auto get = Stream{"get_port"};
              get << call("one", &Fixture::test_get_port_one)
                  << call("many", &Fixture::test_get_port_many)
                  << END;
              return move(get);
            }()
         << []() {
              auto get = Stream{"get_hostport"};
              get << call("one", &Fixture::test_get_hostport_one)
                  << call("many", &Fixture::test_get_hostport_many)
                  << END;
              return move(get);
            }()
         << END;
  return finalize(series);
}
#endiv
