// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace tests::unit::tls { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::tls::Fixture : public cppunit::test::Fixture {
public:
  auto test_Endpoint_1arg() -> void;
  auto test_Endpoint_2arg_host_ca() -> void;
  auto test_Endpoint_2arg_host_port() -> void;
  auto test_Endpoint_3arg() -> void;
  auto test_Endpoints() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string_literals
using namespace std::string_literals;
#import hyperledger.fabric.tls.Endpoint
auto tests::unit::tls::Fixture::test_Endpoint_1arg() -> void {
  using namespace ::hyperledger::fabric::tls;
  namespace host = ::hyperledger::fabric::ip::host;
  Endpoint subject{host::Name{"localhost"}};
  auto const expected = "localhost"s;
  {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = buf.str();
  } {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = to_string(subject);
  }
}
auto tests::unit::tls::Fixture::test_Endpoint_2arg_host_ca() -> void {
  using namespace ::hyperledger::fabric::tls;
  namespace host = ::hyperledger::fabric::ip::host;
  Endpoint subject{host::Name{"localhost"}, "/etc/hyperledger/fabric/tls/ca.crt"};
  auto const expected = "localhost"s;
  {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = buf.str();
  } {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = to_string(subject);
  }
}
auto tests::unit::tls::Fixture::test_Endpoint_2arg_host_port() -> void {
  using namespace ::hyperledger::fabric::tls;
  namespace ip = ::hyperledger::fabric::ip;
  Endpoint subject{ip::host::Name{"localhost"}, ip::Port{80}};
  auto const expected = "localhost:80"s;
  {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = buf.str();
  } {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = to_string(subject);
  }
}
auto tests::unit::tls::Fixture::test_Endpoint_3arg() -> void {
  using namespace ::hyperledger::fabric::tls;
  namespace ip = ::hyperledger::fabric::ip;
  Endpoint subject{ip::host::Name{"localhost"}, ip::Port{80}, "/etc/hyperledger/fabric/tls/ca.crt"};
  auto const expected = "localhost:80"s; // <------ indeed the ca file never appears in the printed form.
  {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = buf.str();
  } {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = to_string(subject);
  }
}
#import hyperledger.fabric.tls.Endpoints
auto tests::unit::tls::Fixture::test_Endpoints() -> void {
  using namespace ::hyperledger::fabric::tls;
  namespace ip = ::hyperledger::fabric::ip;
  Endpoints subject{{ip::host::Name{"localhost"}, ip::Port{80}, "/etc/hypeledger/fabric/tls/ca.crt"},
                    {ip::host::Name{"localhost"}, ip::Port{8080}},
                    {ip::host::Name{"localhost"}, ip::Port{8088}}};
  auto const expected = "localhost:80,localhost:8080,localhost:8088"s;
  {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = buf.str();
  } {
    std::ostringstream buf;
    buf << format(subject);
    auto const actual = to_string(subject);
  }
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::tls::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("tls");
  {
    Stream end("Endpoint");
    end << call("1arg", &Fixture::test_Endpoint_1arg)
        << call("2arg(host,ca)", &Fixture::test_Endpoint_2arg_host_ca)
        << call("2arg(host,port)", &Fixture::test_Endpoint_2arg_host_port)
        << call("3arg", &Fixture::test_Endpoint_3arg)
    ;
    series << move(end);
  }
  series << call("Endpoints", &Fixture::test_Endpoints)
    ;
  return series.release();
}
#endiv
