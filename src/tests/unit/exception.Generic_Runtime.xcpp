// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::exception {
  //
  // A Generic Runtine Exception that ineherits from some Aspect
  // Usinr the CRTP
  //
  // Usage:
  //
  //   struct my::Fixture : public cppunit::Fixture {
  //     ...some tests...                                                    any Aspect will do
  //   protected:                                                            vvvvvvvvvvvvvvvvv
  //     struct Runtime : public ::tests::unit::exception::Generic_Runtime<::hyperledger::user::exception::Aspect>;
  //   };
  //
  template<typename ASPECT> struct Generic_Runtime;
}
#endiv
#divert <hpp>
#import std.runtime_error
namespace tests::unit {
  template<typename ASPECT> struct exception::Generic_Runtime : public ASPECT, public std::runtime_error {
    struct Ancestors {
      using Aspect = ASPECT;
      using Exception = std::runtime_error;
    };
  protected:
    Generic_Runtime();
  public:
    auto what() const noexcept -> char const * override final;
  };
}
#endiv
#divert <tpp>
namespace tests::unit::exception {
  template<typename _> Generic_Runtime<_>::Generic_Runtime() : Ancestors::Exception{"runtime"} { }
  template<typename _> auto Generic_Runtime<_>::what() const noexcept -> char const * { return Ancestors::Exception::what(); }
}
#endiv
