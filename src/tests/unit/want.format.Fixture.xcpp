// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::want::format { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::want::format::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_dq() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.filesystem.path
#import std.ostringstream
#import want.format.dq
auto tests::unit::want::format::Fixture::test_usage_dq() -> void {
  using ::want::format::dq;
  auto adorned = std::filesystem::path{"/build/Hyperledger Fabric/Program Files"};
  std::ostringstream buf;
  buf << dq(adorned);
  auto const actual = buf.str();
  auto const expected = "/build/Hyperledger Fabric/Program Files"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import tests.unit.want.format.dq.Fixture
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::want::format::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("format");
  {
    Stream use("usage");
    use << call("dq", &Fixture::test_usage_dq)
      ;
    series << add(use.release());
  }
  series << add(dq::Fixture::suite())
    ;
  return series.release();
}
#endiv
