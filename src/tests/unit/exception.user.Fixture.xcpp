// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.fabric.user.exception
namespace tests::unit::exception::user {
  namespace fixture {
    class Fixture;
    namespace library = ::hyperledger::fabric::user::exception;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::exception::user::Fixture : public cppunit::test::Fixture {
  auto test_Aspect() -> void;
  auto test_Validation() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Runtime;
};
#endiv
#divert <cpp>
#import hyperledger.fabric.user.exception.Aspect
#import tests.unit.exception.user.Fixture.Runtime
namespace tests::unit::exception::user::fixture {
  auto Fixture::test_Aspect() -> void try {
    throw Runtime{};
  } catch (library::Aspect const &) {
    CPPUNIT_ASSERT(true);
    return;
  }
}
#import hyperledger.fabric.user.exception.Validation
namespace tests::unit::exception::user::fixture {
  auto Fixture::test_Validation() -> void {
    using Subject = library::Validation;
    auto subject = Subject{"not a valid thing"};
    CPPUNIT_ASSERT(nullptr != subject.what());
  }
}
#import rigging.suite.io
auto tests::unit::exception::user::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"user"};
  series << call("Aspect", &Fixture::test_Aspect)
         << call("Validation", &Fixture::test_Validation)
         << END;
  return finalize(series);
}
#endiv
