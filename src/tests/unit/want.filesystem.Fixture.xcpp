// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace tests::unit::want::filesystem { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::want::filesystem::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_dequote() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string_literals
using namespace std::string_literals;
#import std.filesystem.path
#import want.filesystem.dequote
auto tests::unit::want::filesystem::Fixture::test_usage_dequote() -> void {
  using ::want::filesystem::dequote;
  auto adorned = std::filesystem::path{"/build/Hyperledger Fabric/Program Files"};
  auto un = dequote(adorned);
  auto const actual = un;
  auto const expected = "/build/Hyperledger Fabric/Program Files"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import tests.unit.want.filesystem.dequote.Fixture
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::want::filesystem::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("filesystem");
  {
    Stream use("usage");
    use << call("dequote", &Fixture::test_usage_dequote)
      ;
    series << add(use.release());
  }
  series << add(dequote::Fixture::suite())
    ;
  return series.release();
}
#endiv
