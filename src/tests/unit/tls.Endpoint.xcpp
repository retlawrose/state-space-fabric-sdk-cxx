// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.tls.endpoint
#import hyperledger.ip.host
namespace tests::unit::tls {
  namespace [[eponymous]] endpoint {
    class Endpoint;
    namespace library = ::hyperledger::tls::endpoint;
    namespace ip = ::hyperledger::ip;
    namespace host = ::hyperledger::ip::host;
  }
  using endpoint::Endpoint;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import hyperledger.tls.Endpoint
struct tests::unit::tls::endpoint::Endpoint : public cppunit::test::Fixture {
  using Subject = library::Endpoint;
  auto test_1arg() -> void;
  auto test_2arg_host_ca() -> void;
  auto test_2arg_host_port() -> void;
  auto test_3arg() -> void;
  //
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import hyperledger.tls.format
#import hyperledger.tls.to_string
namespace tests::unit::tls::endpoint {
  auto tests::unit::tls::Endpoint::test_1arg() -> void {
    Subject subject{host::Name{"localhost"}};
    auto const expected = "localhost"s;
    {
      std::ostringstream buf;
      buf << format(subject);
      auto const actual = buf.str();
    } {
      std::ostringstream buf;
      buf << format(subject);
      auto const actual = to_string(subject);
    }
  }
  auto Endpoint::test_2arg_host_ca() -> void {
    Subject subject{host::Name{"localhost"}, "/etc/hyperledger/fabric/tls/ca.crt"};
    auto const expected = "localhost"s;
    {
      std::ostringstream buf;
      buf << format(subject);
      auto const actual = buf.str();
    } {
      std::ostringstream buf;
      buf << format(subject);
      auto const actual = to_string(subject);
    }
  }
  auto Endpoint::test_2arg_host_port() -> void {
    Subject subject{host::Name{"localhost"}, ip::Port{80}};
    auto const expected = "localhost:80"s;
    {
      std::ostringstream buf;
      buf << format(subject);
      auto const actual = buf.str();
    } {
      std::ostringstream buf;
      buf << format(subject);
      auto const actual = to_string(subject);
    }
  }
  auto Endpoint::test_3arg() -> void {
    Subject subject{host::Name{"localhost"}, ip::Port{80}, "/etc/hyperledger/fabric/tls/ca.crt"};
    auto const expected = "localhost:80"s; // <------ indeed the ca file never appears in the printed form.
    {
      std::ostringstream buf;
      buf << format(subject);
      auto const actual = buf.str();
    } {
      std::ostringstream buf;
      buf << format(subject);
      auto const actual = to_string(subject);
    }
  }
}
#import rigging.suite.io
auto tests::unit::tls::endpoint::Endpoint::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"Endpoint"};
  series << call("1arg", &Endpoint::test_1arg)
         << call("2arg(host,ca)", &Endpoint::test_2arg_host_ca)
         << call("2arg(host,port)", &Endpoint::test_2arg_host_port)
         << call("3arg", &Endpoint::test_3arg)
         << END;
  return finalize(series);
}
#endiv
