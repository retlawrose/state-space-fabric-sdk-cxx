// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import tests.unit.ca.Service.template
namespace tests::unit::ca::service {
  template<> struct Service<library::Service<library::MAIN>>;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import hyperledger.fabric.ca.Service
namespace tests::unit::ca::service {
  template<> struct Service<library::Service<library::MAIN>> : public cppunit::test::Fixture {
    using Subject = library::Service<library::MAIN>;
    auto test_constructor() -> void;
    template<required::name::Subservice> auto test_api() -> void;
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <tpp>
namespace tests::unit::ca::service {
  template<required::name::Subservice NAME> auto Service<library::Service<library::MAIN>>::test_api() -> void {
#warning WRITETHIS template<required::name::Subservice NAME> auto Service<MAIN>::test_api() -> void
  }
}
#endiv
#divert <cpp>
namespace tests::unit::ca::service {
  auto Service<library::Service<library::MAIN>>::test_constructor() -> void {
#warning WRITETHIS auto tests::unit::ca::Service::test_constructor() -> void
  }
}
#import rigging.suite.io
namespace tests::unit::ca::service {
  auto Service<library::Service<library::MAIN>>::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"MAIN"};
    series << []() {
                auto con = Stream{"constructor"};
                con << call("...configurations...", &Service::test_constructor)
                    << END;
                return move(con);
              }()
           << [] {
                auto api = Stream{"api"};
                api << call("AFFILIATION", &Service::test_api<library::AFFILIATION>)
                    << call("CERTIFICATE", &Service::test_api<library::CERTIFICATE>)
                    << call("ENROLLMENT", &Service::test_api<library::ENROLLMENT>)
                    << call("IDENTITY", &Service::test_api<library::IDENTITY>)
                    << call("INFORMATION", &Service::test_api<library::INFORMATION>)
                    << call("REGISTRATION", &Service::test_api<library::REGISTRATION>)
                    << call("REVOCATION", &Service::test_api<library::REVOCATION>)
                    << call("REVOCATIONS", &Service::test_api<library::REVOCATIONS>)
                    << END;
                return move(api);
              }()
           << END;
    return finalize(series);
  }
}
#endiv
