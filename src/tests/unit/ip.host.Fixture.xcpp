// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace tests::unit::ip::host { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::ip::host::Fixture : public cppunit::test::Fixture {
public:
  auto test_Uninterpreted() -> void;
  auto test_Name() -> void;
  auto test_Address4() -> void;
  auto test_Address6() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import hyperledger.fabric.ip::Host
auto tests::unit::ip::host::Fixture::test_Uninterpreted() -> void {
  using namespace ::hyperledger::fabric::ip::host;
  Uninterpreted subject{"localhost"};
  CPPUNIT_ASSERT(!subject.empty());
}
auto tests::unit::ip::host::Fixture::test_Name() -> void {
  using namespace ::hyperledger::fabric::ip::host;
  Name subject{"localhost"};
  CPPUNIT_ASSERT(!subject.empty());
}
auto tests::unit::ip::host::Fixture::test_Address4() -> void {
  using namespace ::hyperledger::fabric::ip::host;
  Address4 subject{"127.0.0.1"};
  CPPUNIT_ASSERT(!subject.empty());
}
auto tests::unit::ip::host::Fixture::test_Address6() -> void {
  using namespace ::hyperledger::fabric::ip::host;
  Address6 subject{"::1"};
  CPPUNIT_ASSERT(!subject.empty());
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::ip::host::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("host");
  series << call("Uninterpreted", &Fixture::test_Uninterpreted)
         << call("Name", &Fixture::test_Name)
         << call("Address4", &Fixture::test_Address4)
         << call("Address6", &Fixture::test_Address6)
    ;
  return series.release();
}
#endiv
