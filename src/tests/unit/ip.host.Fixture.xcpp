// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger.ip.host
namespace tests::unit::ip::host {
  namespace [[eponymous]] fixture {
    namespace library = ::hyperledger::ip::host;
    class Fixture;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import hyperledger.ip.Host
struct tests::unit::ip::host::fixture::Fixture : public cppunit::test::Fixture {
  using Subject = library::Host;
  auto test_Uninterpreted() -> void;
  auto test_Name() -> void;
  auto test_Address4() -> void;
  auto test_Address6() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::ip::host::fixture {
  auto Fixture::test_Uninterpreted() -> void {
    library::Uninterpreted subject{"localhost"};
    CPPUNIT_ASSERT(!subject.empty());
  }
  auto Fixture::test_Name() -> void {
    library::Name subject{"localhost"};
    CPPUNIT_ASSERT(!subject.empty());
  }
  auto Fixture::test_Address4() -> void {
    library::Address4 subject{"127.0.0.1"};
    CPPUNIT_ASSERT(!subject.empty());
  }
  auto Fixture::test_Address6() -> void {
    library::Address6 subject{"::1"};
    CPPUNIT_ASSERT(!subject.empty());
  }
}
#import rigging.suite.io
auto tests::unit::ip::host::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"host"};
  series << call("Uninterpreted", &Fixture::test_Uninterpreted)
         << call("Name", &Fixture::test_Name)
         << call("Address4", &Fixture::test_Address4)
         << call("Address6", &Fixture::test_Address6)
         << END;
  return finalize(series);
}
#endiv
