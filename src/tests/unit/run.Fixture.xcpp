// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/hyperledger-fabric-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import hyperledger
#import hyperledger.fabric.v0.run
#import hyperledger.fabric.v0.peer
namespace tests::unit::run {
  namespace fixture {
    class Fixture;
    namespace hyperledger = ::hyperledger;
    namespace library = ::hyperledger::fabric::v0::run;
    namespace peer = ::hyperledger::fabric::v0::peer;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::run::fixture::Fixture : public cppunit::test::Fixture {
  auto test_usage_push_back() -> void;
  template<typename TYPE> auto test_usage_Chaincode() -> void;
  template<typename TYPE> auto test_usage_Peer() -> void;
  static auto suite() -> cppunit::Test *;
};
#import hyperledger.Success
#import hyperledger.string.Storage
namespace tests::unit::run::fixture {
  template<> auto Fixture::test_usage_Chaincode<hyperledger::Success>() -> void;
  template<> auto Fixture::test_usage_Chaincode<hyperledger::string::Storage>() -> void;
  template<> auto Fixture::test_usage_Peer<hyperledger::Success>() -> void;
  template<> auto Fixture::test_usage_Peer<hyperledger::string::Storage>() -> void;
}
#endiv
#divert <cpp>
#import hyperledger.Success
#import hyperledger.fabric.v0.run.Chaincode.ALL
#import hyperledger.fabric.v0.peer.chaincode.Call
namespace tests::unit::run::fixture {
  template<> auto Fixture::test_usage_Chaincode<hyperledger::Success>() -> void {
    auto context = peer::chaincode::Call{};
    auto subject = library::Chaincode<hyperledger::Success>{"invoke", context, "...bogus-args..."}; // <--------------- does it construct?
    CPPUNIT_ASSERT(sizeof (subject));
  }
  template<> auto Fixture::test_usage_Chaincode<hyperledger::string::Storage>() -> void {
    auto context = peer::chaincode::Call{};
    auto subject = library::Chaincode<hyperledger::string::Storage>{"query", context, "...bogus-args..."}; // <--------------- does it construct?
    CPPUNIT_ASSERT(sizeof (subject));
  }
}
#import hyperledger.fabric.v0.peer.Context
#import hyperledger.fabric.v0.run.Peer.ALL
namespace tests::unit::run::fixture {
  template<> auto Fixture::test_usage_Peer<hyperledger::Success>() -> void {
    auto context = peer::chaincode::Call{};
    auto subject = library::Peer<hyperledger::Success>{"channel", context};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  template<> auto Fixture::test_usage_Peer<hyperledger::string::Storage>() -> void {
    auto context = peer::chaincode::Call{};
    auto subject = library::Peer<hyperledger::string::Storage>{"channel", context};
    CPPUNIT_ASSERT(sizeof (subject));
  }
}
#import hyperledger.fabric.v0.run.Arguments
#import hyperledger.fabric.v0.run.push_back
namespace tests::unit::run::fixture {
  auto Fixture::test_usage_push_back() -> void {
    auto lhs = library::Arguments{};
    library::push_back<6>(lhs) << 1 << 'a' << 2.0 << "b"s << "c"sv << std::filesystem::path{"/."};
    CPPUNIT_ASSERT(6 == lhs.size());
  }
}
#import tests.unit.run.Push_Back
#import tests.unit.run.Loader
#import rigging.suite.io
auto tests::unit::run::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"run"};
  series << []() {
              auto use = Stream{"usage"};
              use << call("push_back", &Fixture::test_usage_push_back)
                  << END;
              return move(use);
            }()
         << []() {
              auto peer = Stream{"Peer"};
              peer << call("Success", &Fixture::test_usage_Chaincode<hyperledger::Success>)
                   << call("string", &Fixture::test_usage_Chaincode<std::string>)
                   << END;
              return move(peer);
            }()
         << []() {
              auto cha = Stream{"Chaincode"};
              cha << call("Success", &Fixture::test_usage_Chaincode<hyperledger::Success>)
                  << call("string", &Fixture::test_usage_Chaincode<std::string>)
                  << END;
              return move(cha);
            }()
         << add<Push_Back>()
         << add<Loader>()
         << END;
  return finalize(series);
}
#endiv
