// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace tests::unit::run { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::run::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_push_back() -> void;
  template<typename TYPE> auto test_usage_Chaincode() -> void;
  template<typename TYPE> auto test_usage_Peer() -> void;
  static auto suite() -> cppunit::Test *;
};
#import hyperledger.fabric.Success
#import std.string
namespace tests::unit::run {
  template<> auto Fixture::test_usage_Chaincode<hyperledger::fabric::Success>() -> void;
  template<> auto Fixture::test_usage_Chaincode<std::string>() -> void;
  template<> auto Fixture::test_usage_Peer<hyperledger::fabric::Success>() -> void;
  template<> auto Fixture::test_usage_Peer<std::string>() -> void;
}
#endiv
#divert <cpp>
#import hyperledger.fabric.Success
#import hyperledger.fabric.run.Chaincode.ALL
#import hyperledger.fabric.peer.chaincode.Call
template<> auto tests::unit::run::Fixture::Fixture::test_usage_Chaincode<hyperledger::fabric::Success>() -> void {
  namespace hf = ::hyperledger::fabric;
  hf::peer::chaincode::Call context;
  hf::run::Chaincode<hf::Success> subject{"package", context}; // <--------------- does it construct?
}
template<> auto tests::unit::run::Fixture::Fixture::test_usage_Chaincode<std::string>() -> void {
  namespace hf = ::hyperledger::fabric;
  hf::peer::chaincode::Call context;
  hf::run::Chaincode<std::string> subject{"query", context}; // <--------------- does it construct?
}
#import hyperledger.fabric.peer.Context
#import hyperledger.fabric.run.Peer.ALL
template<> auto tests::unit::run::Fixture::Fixture::test_usage_Peer<hyperledger::fabric::Success>() -> void {
  namespace hf = ::hyperledger::fabric;
  hf::peer::chaincode::Call context;
  hf::run::Peer<hf::Success> subject{"channel", context};
}
template<> auto tests::unit::run::Fixture::Fixture::test_usage_Peer<std::string>() -> void {
  namespace hf = ::hyperledger::fabric;
  hf::peer::chaincode::Call context;
  hf::run::Peer<std::string> subject{"channel", context};
}
#import hyperledger.fabric.run.Arguments
#import hyperledger.fabric.run.push_back
auto tests::unit::run::Fixture::test_usage_push_back() -> void {
  using ::hyperledger::fabric::run::Arguments;
  using ::hyperledger::fabric::run::push_back;
  Arguments lhs;
  push_back<6>(lhs) << 1 << 'a' << 2.0 << "b"s << "c"sv << std::filesystem::path{"/."};
  CPPUNIT_ASSERT(6 == lhs.size());
}
#import tests.unit.run.Push_Back
#import tests.unit.run.Loader
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::run::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("run");
  {
    Stream use("usage");
    use << call("push_back", &Fixture::test_usage_push_back)
      ;
    {
      Stream pee("Peer");
      pee << call("Success", &Fixture::test_usage_Chaincode<hyperledger::fabric::Success>)
          << call("string", &Fixture::test_usage_Chaincode<std::string>)
        ;
      use << add(pee.release());
    } {
      Stream cha("Chaincode");
      cha << call("Success", &Fixture::test_usage_Chaincode<hyperledger::fabric::Success>)
          << call("string", &Fixture::test_usage_Chaincode<std::string>)
        ;
      use << add(cha.release());
    }
    series << add(use.release());
  }
  series << add(Push_Back::suite())
         << add(Loader::suite())
    ;
  return series.release();
}
#endiv
